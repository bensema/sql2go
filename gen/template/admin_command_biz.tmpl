package http

import (
	"fmt"
	"github.com/bensema/betbit/model"
	"github.com/bensema/betbit/server/http/internal"
	"github.com/bensema/betbit/utils"
	"github.com/bensema/library/biz"
	"github.com/gin-gonic/gin"
	"github.com/shopspring/decimal"
)

func adminCommand(c *gin.Context) {
	cmd, _ := c.Get(model.AdminCommand)
	switch cmd {
	{{range $key, $T := .}}
	case biz.{{.TableNameGo}}Pages:
		{{.TableNameGoV2}}Pages(c)
	case biz.{{.TableNameGo}}Add:
		{{.TableNameGoV2}}Add(c)
	case biz.{{.TableNameGo}}Del:
		{{.TableNameGoV2}}Del(c)
	case biz.{{.TableNameGo}}Query:
		{{.TableNameGoV2}}Query(c)
	case biz.{{.TableNameGo}}Update:
		{{.TableNameGoV2}}Update(c)
    {{end}}
	}
}
{{range $key, $T := .}}
func {{.TableNameGoV2}}Pages(c *gin.Context) {
	m := &model.Find{{.TableNameGo}}Req{}
	_orderBy, _ := c.GetQuery("order_by")
	_sort, _ := c.GetQuery("sort")
	_num, _ := c.GetQuery("num")
	_size, _ := c.GetQuery("size")
    {{range $j, $item := .TableDesc -}}
    {{$item.TableDesc.ColumnName}},_ := c.GetQuery("{{$item.TableDesc.ColumnName}}")
    {{if eq $item.TableDesc.GolangType  "xtime.Time" -}}
    {{$item.TableDesc.ColumnName}}_from,_ := c.GetQuery("{{$item.TableDesc.ColumnName}}_from")
    {{$item.TableDesc.ColumnName}}_to,_ := c.GetQuery("{{$item.TableDesc.ColumnName}}_to")
    {{ end}}
    {{- end}}
    {{range $j, $item := .TableDesc -}}
        {{if eq $item.TableDesc.GolangType  "string" -}}
    m.{{$item.TableDesc.GoColumnName}} = {{$item.TableDesc.ColumnName}}
        {{else if eq $item.TableDesc.GolangType  "xtime.Time" -}}
    m.{{$item.TableDesc.GoColumnName}} = xtime.Time(utils.GetInt({{$item.TableDesc.ColumnName}}))
    m.{{$item.TableDesc.GoColumnName}}From = xtime.Time(utils.GetInt({{$item.TableDesc.ColumnName}}_from))
    m.{{$item.TableDesc.GoColumnName}}To = xtime.Time(utils.GetInt({{$item.TableDesc.ColumnName}}_to))
        {{else if eq $item.TableDesc.GolangType  "int" -}}
    m.{{$item.TableDesc.GoColumnName}} = utils.GetInt({{$item.TableDesc.ColumnName}})
        {{else if eq $item.TableDesc.GolangType  "int64" -}}
    m.{{$item.TableDesc.GoColumnName}} = utils.GetInt64({{$item.TableDesc.ColumnName}})
        {{else if eq $item.TableDesc.GolangType  "decimal.Decimal" -}}
	__dc_{{$item.TableDesc.ColumnName}}, _ := decimal.NewFromString({{$item.TableDesc.ColumnName}})
    m.{{$item.TableDesc.GoColumnName}} = __dc_{{$item.TableDesc.ColumnName}}
    {{ end}}
    {{- end}}
	m.OrderBy = _orderBy
	m.Sort = _sort
	m.Num = utils.GetInt(_num)
	m.Size = utils.GetInt(_size)

	err := m.Verify()
	reply, err := srv.{{.TableNameGo}}Pages(c, m)
	internal.AdminData(c, reply, err)
}

func {{.TableNameGoV2}}Add(c *gin.Context) {
	var m model.{{.TableNameGo}}
	err := c.ShouldBind(&m)
	if err != nil {
		fmt.Println(err)
	}
	err = srv.{{.TableNameGo}}Add(c, &m)
	internal.AdminData(c, nil, err)
}

func {{.TableNameGoV2}}Del(c *gin.Context) {
	v := new(struct {
		ID int `form:"id"`
	})
	err := c.ShouldBind(&v)
	if err != nil {
		fmt.Println(err)
	}
	err = srv.{{.TableNameGo}}Del(c, v.ID)
	internal.AdminData(c, nil, err)
}

func {{.TableNameGoV2}}Query(c *gin.Context) {
	v := new(struct {
		ID int `form:"id"`
	})
	err := c.ShouldBind(&v)
	if err != nil {
		fmt.Println(err)
	}
	reply, err := srv.{{.TableNameGo}}Query(c, v.ID)
	internal.AdminData(c, reply, err)
}

func {{.TableNameGoV2}}Update(c *gin.Context) {
	var m model.{{.TableNameGo}}
	err := c.ShouldBind(&m)
	if err != nil {
		fmt.Println(err)
	}

	err = srv.{{.TableNameGo}}Update(c, &m)
	internal.AdminData(c, nil, err)
}


{{end}}