// Code generated by go-bindata.
// sources:
// template/curd.tmpl
// template/curd_1.tmpl
// template/curd_common.tmpl
// template/markdown.tmpl
// template/model.tmpl
// template/model_reply.tmpl
// template/model_req.tmpl
// template/page.tmpl
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCurdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\xcf\x6e\xe3\x36\x10\xc6\xcf\xe2\x53\x4c\x75\x08\xa4\x40\xa5\xdb\xab\x01\x1f\x1a\x67\xb3\x08\x10\x64\x91\x75\xda\x1e\x16\x8b\x80\x92\xc6\x0e\x37\x14\x69\x91\x54\xb3\xae\xe1\xb7\xe8\xad\x40\x5f\xa5\x4f\x53\xa0\x8f\x51\x90\x94\xfc\x67\xad\xc4\xce\x6e\x7a\x8a\x4d\x0e\x87\xdf\xfc\x66\xf8\xc5\x73\x56\x3c\xb0\x19\x02\x97\x16\xb5\x64\x82\x10\x5e\xcd\x95\xb6\x90\x90\x28\x9e\x71\x7b\xdf\xe4\xb4\x50\xd5\x20\x47\x69\xb0\x62\x03\xc1\x73\xcd\xf4\x62\x50\x28\x69\xf1\xb3\x8d\x9f\x8f\x32\xb5\x88\x49\x84\xd2\x9a\x5a\x40\x8c\xd2\xce\x14\xe5\x6a\x80\xd2\x0e\x4a\xce\x04\x16\xb6\x0d\x89\x8d\xd5\x5c\xce\x4c\x4c\x52\x42\xa6\x8d\x2c\x60\xac\x91\x59\x5c\x2e\xe9\x2d\xcb\x05\x5e\xb3\x0a\xdf\xaa\xd5\x2a\x29\xe0\xb4\xbd\x9a\x8e\xc3\xdf\x0c\xca\x1c\x4e\x4d\x2d\xe8\xf9\x59\x06\x2a\xff\x04\xa7\x95\x2a\x51\xd0\x2f\xcf\xa6\x90\xa0\xd6\x80\x5a\x2b\x9d\xc2\x92\x44\x79\xc3\x45\x89\x1a\x86\x23\x30\xb5\x38\x0b\xdf\x92\x94\x44\x75\x83\x7a\x91\x01\xd3\x33\xe3\x36\xdb\x38\x7a\x29\x0d\x6a\x9b\xa8\xfc\x53\x48\x9c\xa4\x29\x1d\x2b\xd1\x54\xd2\xf8\xc5\xee\x73\x4a\x29\x4d\xe9\x2f\x4c\x34\x18\x36\x2e\x38\x8a\xb2\x5b\xbf\x71\xc9\xdd\x2d\x77\x99\xd3\x02\x23\x28\x73\xfa\xe6\x33\x16\x6d\x3d\x49\x91\xc1\x96\x00\x77\x86\x44\x1a\x6d\xa3\xa5\x8b\x27\xab\x16\xd0\x39\x0a\xdc\x07\x74\xb6\xb8\x2c\x0f\x42\xe2\x25\x04\xde\x7b\x48\x1c\xbe\xe1\x08\x4e\xfa\x09\x2e\x57\x2f\x87\x16\x64\xee\x42\xfb\xf5\x1e\x35\x26\x61\x2c\xe8\x9b\x9b\x24\xe6\x65\xec\x54\xa5\xaf\x47\xe7\xe7\x79\xd9\x33\x3e\x2f\xa3\x93\xc1\x03\x2e\xd6\x9f\x7f\x73\xfd\x0c\xef\x64\xca\x0a\x5c\xee\xcf\xd3\xeb\xc3\x0b\x55\xec\xc2\x9b\xa0\x4d\x1e\x70\xd1\x0a\xfa\xbf\x60\xae\x41\xbe\x45\xfb\xcd\x33\xf6\xcc\xa3\x0c\xc2\x76\x19\xbe\x2a\xc2\x09\x3a\x9b\xe9\x79\x9f\x17\x5a\x55\x1d\xb6\x00\x77\x1b\xf3\x71\x5c\xd7\x50\xfd\xca\x7b\xf5\xf8\x34\x58\x3a\x29\x98\xdc\x73\x83\x3d\xdc\x17\x5c\x96\x2f\x36\x3d\x8d\x75\xc7\xb7\xef\xfc\x7b\xac\x43\x13\x0c\x7c\xf8\x78\x7c\x1f\x0c\x8c\x9e\x8e\x77\xad\xe8\x23\x3e\xa9\x45\x6f\x09\x1a\xeb\x0c\x26\x37\x57\xb7\x8b\x39\x5e\x71\x63\x5d\xe5\xea\xd1\x84\x6b\x87\x1b\x86\xcf\x4d\x26\x9f\xfa\xe8\xef\x46\x20\xb9\x70\x22\x3b\x78\xd1\x8a\x44\x25\x4e\x51\x83\xcb\x49\xc7\x42\x19\x74\xed\x99\xaa\x76\xe5\xda\xa5\xf4\x75\x1d\xf1\x48\xdb\xae\xfa\x83\x4f\x34\xad\x47\xca\x5a\x8b\x13\xd3\xe1\x63\xf3\x39\xca\xd2\xa3\xf7\xff\x9a\x52\x2f\xf5\x88\x96\xdf\x2a\xcb\xc4\xeb\xf4\xdd\xba\x54\xce\xb7\xbe\x6c\x71\xd8\x18\xc1\x0f\x5f\xdf\xc9\xb1\x6a\xa4\xfd\x9a\x77\x70\xe2\x2f\xdf\x1f\xff\x43\x37\x1f\x28\x37\x73\x9e\xe0\x84\x6d\xbc\xa7\xb3\xef\x0f\x1f\x77\xac\xfb\xdb\xec\xda\x78\x53\x51\x7e\xe7\xa4\xb5\x88\x49\xbb\xe6\x0e\x9a\x47\x6e\x8b\xfb\xb5\x98\x25\x89\x0a\x66\x70\x7b\xfe\x87\x24\xda\x64\x39\xec\x56\xbb\x09\x3c\xf6\xe7\x33\xc4\x3e\x26\x39\x4d\x63\x3f\x73\x64\x3b\xb4\xfb\x78\xc8\x02\x89\x7f\x72\x1a\x6b\x7a\x59\xba\x51\x8f\x63\x3f\xe9\x7d\x99\xfa\xcd\x32\x1c\x4d\x5b\x05\x83\x01\x14\x4e\x14\xfc\xfb\xf7\x1f\xff\xfc\xf9\x97\x4f\xde\x11\x1a\x8d\x76\x6a\xdb\x7a\xdc\x9b\x3b\xd6\xae\xeb\x92\xdd\x19\xf7\x23\x75\xe8\x44\xad\x71\xbb\xeb\x26\x6e\xb9\xe3\x1d\x97\x68\x8a\xd8\x81\x0a\xe1\x23\x68\x15\x9e\xa3\x29\xdc\x38\xd1\x77\xba\x44\x7d\xb6\xe8\xf8\xc6\xac\x3f\xfe\xa7\xbd\xf0\x12\xa7\xac\x11\xf6\xa8\x58\xa7\x57\x85\x6f\xae\xf5\x7e\x9c\xc2\xcf\x5d\x3a\x99\x0b\x6e\xb7\xc3\x33\x88\xb3\xb8\xb5\xae\xbb\x0c\xda\x63\xee\x88\x66\x72\x86\xb0\x95\x67\x19\x7c\xa8\xb8\xc7\xe2\xe1\x52\x4e\xac\xde\x1d\x9b\xf5\xe1\xe0\x7b\xbd\x6d\x6b\x2f\x4d\x7c\x09\x69\xf0\xae\x15\x89\x36\xd3\x42\xdf\x4d\xa7\x06\x6d\xe2\x25\x5e\x37\x15\x7c\x0f\x3f\xa6\x70\x1a\x50\xf3\xdf\x71\xeb\x2d\xd0\x2b\x5e\xb5\xb5\xb4\x3b\x4f\x35\x70\x45\xfe\x0b\x00\x00\xff\xff\x73\x8d\x4e\x6a\x76\x0c\x00\x00")

func templateCurdTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCurdTmpl,
		"template/curd.tmpl",
	)
}

func templateCurdTmpl() (*asset, error) {
	bytes, err := templateCurdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/curd.tmpl", size: 3190, mode: os.FileMode(420), modTime: time.Unix(1612870525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateCurd_1Tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x97\xc1\x6e\xe3\x36\x13\xc7\xcf\xd2\x53\xcc\xa7\x43\x20\x05\x5a\xea\xeb\xd5\x80\x0f\x4d\xb2\x59\x04\x58\x64\xbb\xeb\xb4\x3d\x2c\x16\x01\x2d\x8d\x15\x6e\x24\xd2\x26\xa9\x66\x5d\xc3\x6f\xd1\x5b\x81\xbe\x4a\x9f\xa6\x40\x1f\xa3\x18\x52\xb2\xe5\x5a\x49\x9c\x6c\x7a\x29\x9a\x93\x4d\xce\x0c\xff\xfc\xcd\x70\x26\x9e\xf3\xfc\x96\x97\x08\x42\x5a\xd4\x92\x57\x61\x28\xea\xb9\xd2\x16\xe2\x30\x88\x4a\x61\x6f\x9a\x29\xcb\x55\x9d\x4d\x51\x1a\xac\x79\x56\x2a\x5e\xd4\x42\x66\xb5\x2a\xb0\x8a\x42\x00\x80\xbe\x59\x29\xe4\xab\x52\x49\x91\xd3\xa7\x76\xbb\xe0\x96\x4f\xb9\xc1\xcc\x2c\x5a\x0f\x94\xd6\x2c\x2a\x88\x50\xda\x52\x31\xa1\x32\x94\x36\x2b\x04\xaf\x30\xb7\x5b\xab\xc8\x58\x2d\x64\x69\xa2\x30\x09\xc3\x59\x23\x73\x38\xd5\xc8\x2d\xae\x56\xec\x8a\x4f\x2b\xbc\xe4\x35\xbe\x51\xeb\x75\x9c\xc3\x71\x29\x24\x3b\x55\xd2\xe2\x17\x9b\x42\x31\x85\x63\xb3\xa8\xd8\xd9\x49\x0a\x6a\xfa\x19\x8e\x9d\x58\xf6\x77\xbf\x04\x62\xd4\x1a\x50\x6b\xa5\x13\x58\x85\xc1\xb4\x11\x55\x81\x1a\x46\x63\x30\x8b\xea\xc4\x7f\x8b\x93\x30\x58\x34\xa8\x97\x29\x70\x5d\x1a\xda\x6c\xed\xd8\x85\x34\xa8\x6d\xac\xa6\x9f\x7d\xe0\x38\x49\xd8\xa9\xaa\x9a\x5a\x1a\xb7\xd8\x7d\x4e\x18\x63\x09\xfb\x81\x57\x0d\xfa\x8d\x73\x81\x55\xd1\xad\xbf\xa7\xe0\x74\xca\x75\x4a\x5a\x60\x0c\xc5\x94\xbd\xfe\x82\x79\x7b\x9f\x38\x4f\xa1\x27\x80\x7c\xc2\x40\xa3\x6d\xb4\x24\xfb\x70\xdd\xc2\x39\xc3\x0a\xf7\xe1\x9c\x2c\x2f\x8a\x07\x01\x89\x82\x72\xbf\xc7\x82\xb8\x8d\xc6\x70\x34\x8c\x6e\xb5\x7e\x3a\x2d\xaf\x6f\x97\xd6\x8f\x37\xa8\x31\xf6\xe5\xc0\x5e\xbf\x8f\x23\x51\x44\x24\x29\x79\x39\x2c\xdf\xcf\x8b\x81\x9a\x39\x10\x4b\x0a\xb7\xb8\x04\x5f\x87\x29\xfc\x44\x19\xf4\x2f\x65\xc6\x73\x5c\xed\x57\xd0\xcb\x53\xf3\xf2\x77\xa9\x4d\xd0\xc6\xb7\xb8\x6c\x05\xfd\x53\x14\x37\x04\xdf\xa0\x7d\x7e\x55\x3d\xf0\xfe\xbc\xa2\x5d\x78\x2f\xca\x6e\x82\xd4\x50\x06\x9e\xe2\xb9\x56\x75\xc7\xcb\x53\xed\xf3\x3d\x0c\xe8\x86\xa6\x5b\xf9\xa0\xee\xee\x27\xca\x26\x39\x97\x7b\x0f\xbf\xc7\xd9\x61\x3e\x17\xb2\x78\x52\x6b\xd3\xb8\xe8\xd0\x0e\xf9\x7e\xc0\x85\xe7\x6f\xe0\xe3\xa7\xc3\x53\x60\x60\x7c\xbf\x3d\x65\x61\x08\xf6\x64\x51\x0d\xca\xd7\xb8\x48\xa1\xdd\xa4\x0b\xab\x3b\xe3\x8f\x1c\x6d\xd1\x3d\x54\x89\x62\xe6\xac\xff\x37\x06\x29\x2a\x12\xd8\x31\x0b\xd6\x61\x50\xe0\x0c\x35\x50\x4c\x76\x5a\x29\x83\x94\x95\x99\x6a\x57\x2e\x29\xa4\xbb\xd3\x01\x8f\xb2\x4d\xa6\x73\xbc\x27\x57\x03\x52\x36\x5a\x48\x4c\x87\x8e\xcf\xe7\x28\x0b\x87\xdd\x0d\x9f\xc4\x49\xdd\xbe\x28\x9f\xeb\xef\x78\x89\xff\xe6\x7c\xd3\xfd\xde\x0a\x63\xff\xcb\xf9\xe3\x39\xbf\x52\x96\x57\x5f\x9f\x78\x4b\x61\xfc\xcc\xda\xcd\xb1\xdf\x18\xc3\xff\x9f\x9f\xca\x53\xd5\x48\xfb\x9c\x9e\x77\xe4\x0e\xdf\x1f\x29\x8f\x9d\xfc\xc8\x75\x53\xea\xff\x57\xcb\x39\xb6\xa3\x39\x81\xb8\x9b\xd1\x1f\x3f\xed\xcc\xe7\xaf\x9b\xc9\xc6\x0d\x10\xe5\x76\x8e\xda\x71\x30\x69\xd7\xc8\xd1\xdc\x09\x9b\xdf\x6c\xc4\xac\xc2\x20\xe7\x06\xfb\x0f\x60\x14\x06\xdb\x28\x8f\x4f\x26\xf7\x7f\x6f\x17\x83\x2e\x3f\x72\x2b\xdd\xdf\x53\x22\xed\x48\x71\x09\x7c\x58\x4b\xe4\x6c\xe2\xe3\x24\x72\xe5\x1b\xf6\x4d\xbb\x8f\x8f\x0d\xce\x30\x0c\xb2\x0c\xc4\x8c\x2a\x96\x5d\x14\xf4\x70\xa2\x88\xb0\x64\x59\xb0\xa3\x7e\x13\x70\x78\xd2\x7a\xf7\x24\x71\xe1\xd6\x3e\x6a\x4e\xf2\xe0\xcf\xdf\x7f\xf9\xe3\xd7\xdf\x5c\x93\xe8\xa8\x8f\xc7\x3b\xb7\xec\x75\x8c\xed\x31\x9b\xa9\xbd\x1e\x70\x25\xce\xb0\xda\x80\xbe\xcf\x97\xf6\x48\xcb\xb5\xa1\x9f\x47\x23\xba\xda\xa6\x02\x48\xf0\x84\x96\xbb\x12\x88\x0a\x34\x79\x44\xc4\xbd\xf9\xb8\xfd\xcd\xc3\xce\xd0\xe4\x54\xe1\xec\x9d\x2e\x50\x9f\x2c\xbb\x44\x45\x7c\xd8\xfe\xdb\x3d\xf3\x02\x67\xbc\xa9\xec\x41\xb6\xa4\x57\xf9\x6f\x54\x8d\xae\xc2\xfd\x8f\x2a\x36\x99\x57\xc2\xf6\xcd\x53\x88\xd2\xa8\x6d\xa7\xd7\x29\xb4\x6e\xe4\xa2\xb9\x2c\x11\x7a\x71\x56\xbe\x37\xe6\x37\x98\xdf\x5e\xc8\x89\xd5\xbb\xf5\xb7\x71\xf6\xbd\x78\xb0\x92\xda\x43\x63\x77\x85\xc4\xf7\xd3\x75\x18\x6c\xcb\x8e\xbd\x9b\xcd\x0c\xda\xd8\x49\xbc\x6c\x6a\x78\x05\xdf\x24\x70\xec\x51\x8b\x9f\xb1\xf7\x3c\xd9\x5b\x51\xb7\x77\x69\x77\xee\xcb\xe1\x3a\xfc\x2b\x00\x00\xff\xff\x0b\xca\x00\x37\xf0\x0e\x00\x00")

func templateCurd_1TmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCurd_1Tmpl,
		"template/curd_1.tmpl",
	)
}

func templateCurd_1Tmpl() (*asset, error) {
	bytes, err := templateCurd_1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/curd_1.tmpl", size: 3824, mode: os.FileMode(420), modTime: time.Unix(1613653039, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateCurd_commonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\x6b\xe3\x30\x10\x46\xcf\x9a\x5f\xf1\xe1\x93\xbd\x84\xe4\xbe\xe0\xcb\xee\xb2\x50\x48\xa1\x25\xc7\x10\x82\x2a\x8f\xdd\xc1\xea\x28\x96\xe4\x43\x09\xf9\xef\x45\xb1\x5b\x28\x54\xe8\x30\x9a\x87\x1e\xef\x62\xdd\x68\x07\x86\x68\xe6\xa8\xd6\x13\xc9\xdb\x25\xc4\x8c\x9a\x00\xa0\x62\xcd\x43\xd8\x4a\xd8\xb1\xe6\x5d\x27\xd6\xb3\xcb\x15\x19\xd6\x9c\x26\xff\x33\xde\xa5\xc9\x57\xd4\x10\xb9\xa0\xa9\x88\xcc\x61\xf2\x4f\x76\xe0\xbd\xa4\x0c\xb4\xa8\x2e\x76\xe0\xb3\x97\x54\x4c\x2b\xfb\x1b\x66\xcd\x5f\xcc\x95\xd7\x02\xff\x8b\x76\xb8\x9f\x16\x55\x2f\xda\xdd\xd5\xd4\xcf\xea\x90\x26\xff\x67\x16\xdf\x71\xac\x1b\xfc\x5a\x9a\xb6\xff\x96\x8a\x15\xe0\x4a\x26\x72\x9e\xa3\xe2\x3b\xaf\xd7\xda\xed\xe3\xfb\xe1\x79\xdf\xd0\x6d\x75\xba\x57\x76\xe3\x83\x1e\x72\xac\x3b\x49\x38\x9e\x52\x8e\xa2\xc3\x06\x23\x96\xa9\xc1\x4b\x08\xbe\x78\xfb\x10\x21\x1b\x9c\xf1\xbb\x45\xb4\x3a\x30\xca\x8f\x2b\x19\x23\x7d\x19\x8f\x72\x42\xdb\x62\xbc\xaf\x3e\x2b\x72\x9c\x99\x8c\xb9\x51\xb9\xeb\xae\xb7\x3e\x31\xdd\x3e\x02\x00\x00\xff\xff\xc7\xf8\x1c\xb0\x8c\x01\x00\x00")

func templateCurd_commonTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCurd_commonTmpl,
		"template/curd_common.tmpl",
	)
}

func templateCurd_commonTmpl() (*asset, error) {
	bytes, err := templateCurd_commonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/curd_common.tmpl", size: 396, mode: os.FileMode(420), modTime: time.Unix(1613641966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMarkdownTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xc1\x6a\xea\x40\x14\x86\xf7\x81\xbc\xc3\x81\xb8\x50\xb8\xc9\x03\x08\xf7\x6e\xae\x1b\xb9\x17\xeb\x42\xba\x11\x17\xb1\x9e\x16\x69\x92\x96\x68\xa0\x61\x66\xc0\x45\xa1\x85\xd2\xd6\x45\xc1\xac\x0a\x05\x11\xbb\xa8\x52\xda\x82\x98\x3e\x8e\x19\xf5\x2d\x4a\x66\x9c\xd4\x56\x9a\xc5\x84\xf9\xff\xc3\xf9\x4f\xbe\x13\xc3\x80\xd5\xc3\x98\xf7\x62\x3e\x3a\xd7\x35\x5d\xa3\xc9\xfc\x36\xb9\x1c\xd0\x54\x4d\xfa\xd7\x40\x61\x35\x7d\xe5\xd1\x0d\x50\x48\x86\x17\xfc\x65\x0c\x54\xd7\x68\xd1\x34\x4d\x71\xa8\x13\xe4\x4b\xd7\x08\xf1\x6d\xef\x08\xc1\xaa\xd9\x4d\x07\xff\xb7\x3b\x5d\xc6\x28\x10\x62\x95\xbd\x16\x9e\x31\x46\xeb\xe9\x45\x98\x15\xdb\x45\xc6\x1a\x79\xe3\xd3\xfd\x6a\x15\x40\x3e\x94\x10\xeb\xef\x89\xeb\xa2\x27\x9a\x89\x14\xf4\x5a\x8c\xa5\x03\xab\xc0\xdc\x31\x86\xbf\x20\xd7\xee\xa2\x0b\xc5\xdf\x60\x95\xb0\x73\x20\xe3\x75\xcd\x30\x0c\x20\x44\x78\x2a\xc9\x52\xf7\xad\x3c\x5d\xfb\x93\x95\x65\x79\x69\x86\x29\x68\x3c\x0d\xf8\xe4\x4d\xd2\x90\xa4\x84\x00\x14\x96\xcf\x71\x72\x7f\x05\x14\x78\x34\x4d\xfa\xa3\xc5\x6c\xbe\x7c\x9c\x53\x58\xc7\xd1\x6a\x32\x4c\x7a\xef\x99\xc3\xa3\xe9\x62\x16\xaf\xef\x26\xbb\x58\x15\x55\x73\x97\xed\x37\x61\x0b\xb2\x1c\x75\x03\x59\x40\x72\x02\xd7\x93\x1f\x03\x20\xb0\x4b\xa9\x16\x9e\x62\x25\x70\x9b\xe8\x33\x26\xf5\x72\xa7\x12\x38\xce\x66\x37\x25\x3c\xb4\x03\xa7\xbb\x6f\x3b\x01\xaa\x82\xaa\xdf\x76\x6d\x3f\xfc\x87\xa1\x52\x64\xab\x1f\x16\x51\xaf\xed\x55\x1b\x79\x23\xfb\x97\x0a\x99\xf7\x11\x00\x00\xff\xff\x54\x04\xaf\xad\x62\x02\x00\x00")

func templateMarkdownTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMarkdownTmpl,
		"template/markdown.tmpl",
	)
}

func templateMarkdownTmpl() (*asset, error) {
	bytes, err := templateMarkdownTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/markdown.tmpl", size: 610, mode: os.FileMode(420), modTime: time.Unix(1599730646, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x4f\x8b\xa3\x40\x10\xc5\xcf\x5b\x9f\xa2\x10\x59\x74\x09\x7a\x5f\xd8\x53\x42\x72\xdb\xb9\x78\x1b\xe6\xd0\x9a\x8a\xd3\x13\xab\x5b\xda\x16\x46\x9a\xfa\xee\x43\x6b\x42\xfe\x10\x26\x73\x92\x2a\x7f\xef\xf9\xea\xd9\xab\xe6\xa8\x5a\x42\xb6\x7b\xea\x00\x34\xf7\xd6\x79\xcc\xe0\xd7\xa7\xd7\x4c\x98\xb4\xda\xbf\x8f\x75\xd1\x58\x2e\x6b\x32\x03\xb1\x2a\x3b\x5d\x3b\xe5\xa6\x32\x02\x09\xe4\x00\x21\x38\x65\x5a\xc2\xf4\x48\xd3\x0a\xd3\x0a\xff\xfe\xc3\x42\x04\xc0\x4f\x3d\x61\x08\x69\x55\x54\xaa\xee\xe8\xbf\x62\xda\x59\x11\x1c\xbc\x1b\x1b\x8f\xe1\xa2\xfc\x58\x61\xaa\x3d\xf1\x2c\x9d\xe1\x0d\x0d\x8d\x08\x46\x79\x7c\x71\x59\x16\x3b\xbb\xb6\xdd\xc8\x26\xda\x45\xe2\x31\xd3\x29\xd3\x56\x53\xbf\x10\x67\x60\x6b\x1d\x2b\xbf\xd5\xd4\xed\x87\xc5\x5c\x1f\xf0\x5e\xbb\xb8\xaf\x2d\x33\x19\x1f\xa9\xb2\x7c\xf0\x85\x3b\x2a\x04\x32\x7b\x11\x38\x3d\x05\x00\x0e\xa3\x69\x30\x63\xfc\x13\xc2\xed\xfd\x39\xce\x63\x96\xc7\x22\xb4\x69\x31\x80\x23\x3f\x3a\x83\xc9\x35\x2a\x92\x80\x7c\x6b\xb3\x64\x18\xb2\x1c\x5f\xdf\xee\xad\xce\x9b\x80\xcf\x4b\x4e\xce\xe7\x6d\xea\x17\xa7\xe7\x7a\x44\x92\xd5\xe9\x16\x94\x27\x31\x96\x3e\xe7\x14\xda\x78\x72\x07\xd5\x50\x90\xeb\x28\x57\xeb\x9f\xe4\xf9\xcd\xc5\xb3\xdf\x7e\x1b\xee\x34\x7c\x05\x00\x00\xff\xff\x75\x88\x06\x4a\xcd\x02\x00\x00")

func templateModelTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelTmpl,
		"template/model.tmpl",
	)
}

func templateModelTmpl() (*asset, error) {
	bytes, err := templateModelTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.tmpl", size: 717, mode: os.FileMode(420), modTime: time.Unix(1613654646, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModel_replyTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xb1\xaa\xc2\x40\x10\x46\xe1\xfa\xce\x53\xfc\x84\x54\x17\xc9\x03\x04\xec\x44\x3b\x11\x49\x27\x42\xc6\xec\x10\x62\x92\xd9\x90\x8c\xc5\xb2\xcc\xbb\x8b\xb6\xf6\x87\xc3\xb7\x70\x37\x72\x2f\x98\x63\x90\x89\x88\x72\x5e\x59\x7b\x41\x39\x4a\xda\xa1\x6c\x50\xef\x51\xb9\x13\x59\x5a\x04\xc7\x41\x43\xce\x65\x53\x35\xfc\x98\xe4\xcc\xb3\x9c\xa2\xfb\x55\x96\x29\x61\xb3\xf5\xd5\x19\x32\xfd\x1d\xd8\x18\xb7\xfb\xff\x6f\x89\xf6\xb9\x45\xad\x8b\xc0\xc6\x45\x4b\x00\x70\xe1\x7e\x50\xb6\x21\xea\x77\x43\xfe\x31\x88\x06\xf7\x77\x00\x00\x00\xff\xff\xe5\x78\xce\x90\x9b\x00\x00\x00")

func templateModel_replyTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateModel_replyTmpl,
		"template/model_reply.tmpl",
	)
}

func templateModel_replyTmpl() (*asset, error) {
	bytes, err := templateModel_replyTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model_reply.tmpl", size: 155, mode: os.FileMode(420), modTime: time.Unix(1613992842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModel_reqTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xb1\x8e\xc2\x30\x10\x04\xd0\x3a\xfb\x15\xab\x28\xe5\x29\x1f\x10\xe9\x9a\x2b\x8e\x0e\x10\xa4\x27\x4e\xbc\xb2\x4c\x92\xdd\xe0\x98\xc2\xb2\xf6\xdf\x91\xe9\x10\xed\xcc\x1b\x69\x36\x33\xcd\xc6\x11\xae\x62\x69\x01\x80\x9c\x83\x61\x47\xd8\xcc\x94\x7e\xb0\xe9\xb1\xfb\xc5\x56\x15\x20\xa6\x8d\xf0\xdf\xb3\xcd\xb9\xe9\xdb\xde\x8c\x0b\x1d\xcd\x4a\x07\x51\xbd\xd0\x03\xf7\x18\x9e\x53\xc4\x0c\x88\x88\xdf\x04\xaa\x53\xb0\x14\xfe\x52\x81\x9e\x1d\x0e\xf7\x5d\xb8\xab\xa5\xa4\xb7\x31\xd5\x03\x54\x57\x09\xb1\xac\x3f\xc5\x2e\x21\x96\xf6\x6c\x9c\x67\x13\xbd\x30\xe8\xfb\x27\xb1\x55\x7d\x05\x00\x00\xff\xff\x71\xad\x77\x42\xbf\x00\x00\x00")

func templateModel_reqTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateModel_reqTmpl,
		"template/model_req.tmpl",
	)
}

func templateModel_reqTmpl() (*asset, error) {
	bytes, err := templateModel_reqTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model_req.tmpl", size: 191, mode: os.FileMode(420), modTime: time.Unix(1613992842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatePageTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xcb\x6e\xdb\x30\x10\x3c\x8b\x5f\xb1\xd0\x49\x72\xfc\xec\x31\x88\x6e\x3d\x16\x69\x90\x14\x3d\x05\xa8\x09\x99\x72\xd8\x52\x24\x41\xae\x90\xba\x89\xff\xbd\xe0\x43\x0f\xcb\x4a\xe2\x43\x4e\x02\x97\xab\x99\x9d\xd9\xe5\x6a\x5a\xfe\xa1\x7b\x06\xb5\xda\x31\x41\x08\xaf\xb5\x32\x08\x29\x33\x46\x19\x9b\x12\x52\x2a\x69\x11\x32\x92\xac\x56\xf0\x95\x55\xb4\x11\xf8\xc0\xff\x31\x58\x92\x24\x1e\x6f\x9b\x1a\xa0\x80\x4d\x17\xf0\xf7\x05\x7c\x59\x93\x9c\x90\xd5\x0a\x1e\x78\xad\x05\xbb\x73\x2c\x25\x15\x65\x23\x28\x32\x48\x2b\xa3\xea\x74\x0e\x29\xaa\x14\x9e\x39\x3e\xa9\x06\x01\x15\x52\xf1\xab\x54\x8d\x44\xeb\xfe\x0c\x49\xc0\xe5\x8e\xfd\x05\x8b\xd4\x20\xb8\x08\x6c\x48\xd5\xc8\x12\x32\x0d\xb3\x3b\xba\xe7\x92\x22\x57\x32\x1f\x10\x65\x39\x64\x3e\x93\x4b\x9c\x03\x2a\xf7\xcd\xe1\x85\x24\xbc\x02\xbd\x74\x15\x17\x05\xac\xe1\xf5\x15\xf4\x32\x94\xeb\x8e\x2f\x24\x49\xfc\xed\xbc\x0b\xc3\x66\x3e\x94\x4d\x92\x23\x49\x3c\x70\x01\x99\x4f\x5d\x6c\xf2\x59\x4c\xbe\x72\x1e\xa0\x82\x22\x14\x79\xd5\x82\x2c\x5c\xdc\x30\x6c\x8c\x24\x47\xef\xc8\x47\x5e\x9c\x19\x71\xa9\x03\x5e\xbb\xff\x39\x28\xbe\xc4\x84\x4e\x75\x68\xe2\x31\xde\x8f\x6d\x89\x7e\x8c\xcc\xf0\xc9\x81\xb0\x75\x34\x9c\x1e\x6f\x22\xc6\xac\xf3\xc9\x03\x45\x1f\x22\x4d\x9b\x5b\xb4\x84\x7d\x8a\x73\xde\x5f\x7f\xec\x39\xaf\x20\x8a\x5e\xb4\xd6\x6f\xf2\xbe\x82\x21\xa8\xbb\x1e\xe2\x9e\x84\xcf\xdb\x16\xda\xf5\x93\xee\x1b\xf6\xbd\xaa\x2c\xc3\x6f\xbc\xe6\x38\x6c\x9d\xf2\x61\xd7\x3c\xe1\xae\xde\x98\xe5\xc9\x66\x8d\x61\xdd\xd0\x06\xb8\xd0\x31\x0f\xd8\x35\xad\xad\x1c\xae\x83\x59\xfd\xa8\x47\x27\xbb\x06\x04\xaf\xda\xce\x45\x85\xeb\x39\xac\xc7\x8a\x9d\x44\x0f\xd9\xdb\x16\x15\xbf\x2f\x16\xa8\xdc\x41\xea\xa7\x71\x6a\x5e\x27\xc5\x0e\x75\x0e\x07\xf4\x52\xc1\xfd\x64\x7f\xba\xde\xe9\xe6\x30\xc3\xab\x43\x96\x83\xdf\x84\x27\xaf\xe6\xf1\xe6\x94\x2a\xec\xca\xe5\x2d\x7b\xce\x52\xd9\xd4\xe1\x9c\xe6\x24\x39\x02\x13\x96\xc1\xdb\xcf\xad\xdf\xa0\xa3\x77\xf7\x1e\x85\x75\x09\x93\x1c\x97\x3d\xd9\x16\x53\x72\xd1\xaf\xa3\xa8\x1b\x34\x33\x95\x32\x35\x68\xb7\xa1\xa8\xd8\x2b\xc3\xf1\xa9\x26\x78\xd0\x6c\x98\x66\xd1\x34\x25\x3a\x1a\xbf\xfd\xb9\x44\xd8\xfe\xb6\x4a\x5e\x3b\x03\xd2\x2d\x49\x3c\xf5\x20\xec\x8a\x4e\xb7\x67\x7c\xf7\x4c\x8b\xc3\x10\xf8\x9e\x59\xad\xa4\x65\xcb\x31\x65\xc8\xec\x79\x3d\xc1\x04\x43\x28\x68\xa2\xa2\x1f\xed\xd0\xb5\x71\x3f\x4c\xbe\xa6\xff\x01\x00\x00\xff\xff\x85\xcc\x83\x45\x04\x07\x00\x00")

func templatePageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatePageTmpl,
		"template/page.tmpl",
	)
}

func templatePageTmpl() (*asset, error) {
	bytes, err := templatePageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/page.tmpl", size: 1796, mode: os.FileMode(420), modTime: time.Unix(1613993534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/curd.tmpl":        templateCurdTmpl,
	"template/curd_1.tmpl":      templateCurd_1Tmpl,
	"template/curd_common.tmpl": templateCurd_commonTmpl,
	"template/markdown.tmpl":    templateMarkdownTmpl,
	"template/model.tmpl":       templateModelTmpl,
	"template/model_reply.tmpl": templateModel_replyTmpl,
	"template/model_req.tmpl":   templateModel_reqTmpl,
	"template/page.tmpl":        templatePageTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"curd.tmpl":        &bintree{templateCurdTmpl, map[string]*bintree{}},
		"curd_1.tmpl":      &bintree{templateCurd_1Tmpl, map[string]*bintree{}},
		"curd_common.tmpl": &bintree{templateCurd_commonTmpl, map[string]*bintree{}},
		"markdown.tmpl":    &bintree{templateMarkdownTmpl, map[string]*bintree{}},
		"model.tmpl":       &bintree{templateModelTmpl, map[string]*bintree{}},
		"model_reply.tmpl": &bintree{templateModel_replyTmpl, map[string]*bintree{}},
		"model_req.tmpl":   &bintree{templateModel_reqTmpl, map[string]*bintree{}},
		"page.tmpl":        &bintree{templatePageTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
