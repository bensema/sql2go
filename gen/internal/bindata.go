// Code generated by go-bindata.
// sources:
// template/admin_cmd.tmpl
// template/biz.tmpl
// template/curd.tmpl
// template/curd_1.tmpl
// template/curd_common.tmpl
// template/http_biz.tmpl
// template/markdown.tmpl
// template/model.tmpl
// template/model_reply.tmpl
// template/model_req.tmpl
// template/op_code.tmpl
// template/page.tmpl
// template/service.tmpl
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateAdmin_cmdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x3d\x6b\xc3\x30\x10\x86\xe7\xdc\xaf\x38\x42\x86\x16\x4a\xa6\xd2\x21\x90\x21\x34\x50\x32\xf4\x2b\xa4\x73\x7c\xb1\x0e\x5b\x75\x2c\xa9\xf6\x79\x70\x85\xfe\x7b\x91\x48\x9b\x50\xc7\xda\xf4\x3e\x0f\xf7\x72\x92\xa3\xbc\xa2\x82\xf1\xa0\xbf\x01\xa4\x77\x8c\x2b\x55\x6b\xb3\xe5\xaf\x8e\x5b\xc1\x56\x9a\x2e\x17\xf4\x30\x79\x75\xdc\x90\xd8\x06\x31\x86\xda\x14\x88\x98\x7d\xb6\xd6\x2c\xa6\xf6\x84\xa6\xd9\x59\xdb\xa8\x51\x6d\xaf\x55\x34\x77\xb6\x62\x83\xe9\xfc\x37\x25\xa2\xe8\xac\x3a\x29\xf1\xba\x43\x9d\x94\x51\xd9\x38\xc4\x11\x45\xbb\xd4\xf3\xc7\x51\x1b\x79\xb8\xc7\x8b\x9e\xc8\xb7\x38\x3a\x20\x6d\xf4\x58\xab\x5f\x9e\x9e\x26\xde\x4f\x3c\xaf\xd3\x26\xcf\x2c\xa5\x55\x57\x27\xd4\x09\x45\x69\x4d\x42\x23\x35\x8a\x84\xa6\x19\x84\xcb\x0f\x88\x2d\xda\x08\x40\x6e\x4d\x2b\x78\x03\x93\xfd\x19\x2c\x51\x5b\x21\xf0\xbe\x21\x53\x30\xce\x2a\xee\xef\x70\xb6\xc3\xc5\x12\xe7\x21\xc0\xc4\xfb\xf9\x8e\x0e\x47\x7e\xa1\x9a\x9f\x6c\x08\x2b\xa5\x86\xe1\x9a\x8f\xc3\xf0\xc3\x29\x12\x1e\xe6\xef\x1d\x37\xfd\x30\x7e\xa3\x82\x5b\xf0\x9e\x8d\x0a\x01\x6e\xe1\x27\x00\x00\xff\xff\x20\xaa\xa9\x26\x4e\x02\x00\x00")

func templateAdmin_cmdTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateAdmin_cmdTmpl,
		"template/admin_cmd.tmpl",
	)
}

func templateAdmin_cmdTmpl() (*asset, error) {
	bytes, err := templateAdmin_cmdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/admin_cmd.tmpl", size: 590, mode: os.FileMode(420), modTime: time.Unix(1616847902, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateBizTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\xd2\xb1\x8a\xdc\x30\x10\x06\xe0\x7a\xf5\x14\x83\xb9\xc2\x5e\x14\xb9\x0f\xa4\xc9\x1d\x39\xd2\x84\x70\x6c\xaa\x90\x62\x6c\xcd\x29\x62\x2d\x69\x2d\xcb\x21\x8b\xd0\xbb\x87\xf5\xc5\x04\x7c\xb2\x97\x6c\x71\x85\x41\xc5\x68\xfe\xcf\xa3\x39\x61\x7b\x44\x45\x20\xd1\x31\xa6\xcd\xc9\xf9\x00\x25\xdb\x15\x12\x03\x36\x38\x50\x3d\xf4\x5d\xc1\x76\x85\xd2\xe1\xe7\xd8\x88\xd6\x99\xba\x21\x3b\x90\xc1\x5a\x39\x94\x46\xdb\x5a\xa2\xab\xb5\x0d\xe4\x2d\x5e\x2b\x35\x4e\xd2\xb2\x46\x69\xfb\x4e\x39\xab\xdb\xcb\xa9\x60\x15\x63\x31\x7a\xb4\x8a\xe0\xee\x48\x67\x0e\x77\x07\x78\xff\x01\x44\x4a\x8c\xb1\xe7\xd1\xb6\x50\x4a\xd8\x3f\xa0\xab\xe0\xde\x13\x06\x8a\x51\x1c\xb0\xe9\xe8\x0b\x1a\x7a\x74\x29\x95\x2d\xec\x95\xb6\xe2\xde\xd9\x40\xbf\x03\x07\x03\xfb\x29\x57\x2c\x2b\x2b\x28\x3d\x0d\x63\x17\x60\xe8\x3b\xf1\x34\x1d\x39\x90\xf7\x97\xcf\xf9\x0a\x22\xdb\x79\x0a\xa3\xb7\x30\xff\x9f\x58\xcb\xe4\x20\x85\x6c\x38\x98\x8a\xa5\xa5\xf3\x81\x3a\x7a\x7d\xe7\xe3\xf9\xb3\x7c\x65\xd5\xf2\x12\x55\xbd\x00\x72\xf9\x5b\xbd\x66\x83\x96\x19\xc4\xb7\x93\xcc\xc0\x37\x10\x1c\x8e\x74\x86\x21\x78\x6d\x15\x87\x5f\xd8\x8d\xf4\xc2\x78\xc6\x96\x62\xda\x30\x6e\x45\xfd\x33\x4e\xfd\xff\x36\xce\x78\x1f\x29\xfc\xd7\xc4\xca\x95\x47\xe6\x1b\x8f\xb9\x9a\xb1\x39\xc9\x4f\xda\xca\xab\x4b\xe7\xa9\x9f\xd7\x2e\x57\xff\x44\x7d\x05\xe5\xf7\x1f\x37\xa0\xf3\xf1\xb3\xd8\x53\x9f\x21\x7f\x45\x45\xb9\x7b\x07\x17\xb0\xbb\xcd\x3e\x6d\xc8\xba\xf2\x4a\xe2\x6d\xdc\x37\x9c\xf2\x3a\x61\x49\x67\x31\x92\x95\x29\xfd\x09\x00\x00\xff\xff\x1b\x7e\x65\xa2\x4a\x05\x00\x00")

func templateBizTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateBizTmpl,
		"template/biz.tmpl",
	)
}

func templateBizTmpl() (*asset, error) {
	bytes, err := templateBizTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/biz.tmpl", size: 1354, mode: os.FileMode(420), modTime: time.Unix(1616843664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateCurdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\xcf\x6e\xe3\x36\x10\xc6\xcf\xe2\x53\x4c\x75\x08\xa4\x40\xa5\xdb\xab\x01\x1f\x1a\x67\xb3\x08\x10\x64\x91\x75\xda\x1e\x16\x8b\x80\x92\xc6\x0e\x37\x14\x69\x91\x54\xb3\xae\xe1\xb7\xe8\xad\x40\x5f\xa5\x4f\x53\xa0\x8f\x51\x90\x94\xfc\x67\xad\xc4\xce\x6e\x7a\x8a\x4d\x0e\x87\xdf\xfc\x66\xf8\xc5\x73\x56\x3c\xb0\x19\x02\x97\x16\xb5\x64\x82\x10\x5e\xcd\x95\xb6\x90\x90\x28\x9e\x71\x7b\xdf\xe4\xb4\x50\xd5\x20\x47\x69\xb0\x62\x03\xc1\x73\xcd\xf4\x62\x50\x28\x69\xf1\xb3\x8d\x9f\x8f\x32\xb5\x88\x49\x84\xd2\x9a\x5a\x40\x8c\xd2\xce\x14\xe5\x6a\x80\xd2\x0e\x4a\xce\x04\x16\xb6\x0d\x89\x8d\xd5\x5c\xce\x4c\x4c\x52\x42\xa6\x8d\x2c\x60\xac\x91\x59\x5c\x2e\xe9\x2d\xcb\x05\x5e\xb3\x0a\xdf\xaa\xd5\x2a\x29\xe0\xb4\xbd\x9a\x8e\xc3\xdf\x0c\xca\x1c\x4e\x4d\x2d\xe8\xf9\x59\x06\x2a\xff\x04\xa7\x95\x2a\x51\xd0\x2f\xcf\xa6\x90\xa0\xd6\x80\x5a\x2b\x9d\xc2\x92\x44\x79\xc3\x45\x89\x1a\x86\x23\x30\xb5\x38\x0b\xdf\x92\x94\x44\x75\x83\x7a\x91\x01\xd3\x33\xe3\x36\xdb\x38\x7a\x29\x0d\x6a\x9b\xa8\xfc\x53\x48\x9c\xa4\x29\x1d\x2b\xd1\x54\xd2\xf8\xc5\xee\x73\x4a\x29\x4d\xe9\x2f\x4c\x34\x18\x36\x2e\x38\x8a\xb2\x5b\xbf\x71\xc9\xdd\x2d\x77\x99\xd3\x02\x23\x28\x73\xfa\xe6\x33\x16\x6d\x3d\x49\x91\xc1\x96\x00\x77\x86\x44\x1a\x6d\xa3\xa5\x8b\x27\xab\x16\xd0\x39\x0a\xdc\x07\x74\xb6\xb8\x2c\x0f\x42\xe2\x25\x04\xde\x7b\x48\x1c\xbe\xe1\x08\x4e\xfa\x09\x2e\x57\x2f\x87\x16\x64\xee\x42\xfb\xf5\x1e\x35\x26\x61\x2c\xe8\x9b\x9b\x24\xe6\x65\xec\x54\xa5\xaf\x47\xe7\xe7\x79\xd9\x33\x3e\x2f\xa3\x93\xc1\x03\x2e\xd6\x9f\x7f\x73\xfd\x0c\xef\x64\xca\x0a\x5c\xee\xcf\xd3\xeb\xc3\x0b\x55\xec\xc2\x9b\xa0\x4d\x1e\x70\xd1\x0a\xfa\xbf\x60\xae\x41\xbe\x45\xfb\xcd\x33\xf6\xcc\xa3\x0c\xc2\x76\x19\xbe\x2a\xc2\x09\x3a\x9b\xe9\x79\x9f\x17\x5a\x55\x1d\xb6\x00\x77\x1b\xf3\x71\x5c\xd7\x50\xfd\xca\x7b\xf5\xf8\x34\x58\x3a\x29\x98\xdc\x73\x83\x3d\xdc\x17\x5c\x96\x2f\x36\x3d\x8d\x75\xc7\xb7\xef\xfc\x7b\xac\x43\x13\x0c\x7c\xf8\x78\x7c\x1f\x0c\x8c\x9e\x8e\x77\xad\xe8\x23\x3e\xa9\x45\x6f\x09\x1a\xeb\x0c\x26\x37\x57\xb7\x8b\x39\x5e\x71\x63\x5d\xe5\xea\xd1\x84\x6b\x87\x1b\x86\xcf\x4d\x26\x9f\xfa\xe8\xef\x46\x20\xb9\x70\x22\x3b\x78\xd1\x8a\x44\x25\x4e\x51\x83\xcb\x49\xc7\x42\x19\x74\xed\x99\xaa\x76\xe5\xda\xa5\xf4\x75\x1d\xf1\x48\xdb\xae\xfa\x83\x4f\x34\xad\x47\xca\x5a\x8b\x13\xd3\xe1\x63\xf3\x39\xca\xd2\xa3\xf7\xff\x9a\x52\x2f\xf5\x88\x96\xdf\x2a\xcb\xc4\xeb\xf4\xdd\xba\x54\xce\xb7\xbe\x6c\x71\xd8\x18\xc1\x0f\x5f\xdf\xc9\xb1\x6a\xa4\xfd\x9a\x77\x70\xe2\x2f\xdf\x1f\xff\x43\x37\x1f\x28\x37\x73\x9e\xe0\x84\x6d\xbc\xa7\xb3\xef\x0f\x1f\x77\xac\xfb\xdb\xec\xda\x78\x53\x51\x7e\xe7\xa4\xb5\x88\x49\xbb\xe6\x0e\x9a\x47\x6e\x8b\xfb\xb5\x98\x25\x89\x0a\x66\x70\x7b\xfe\x87\x24\xda\x64\x39\xec\x56\xbb\x09\x3c\xf6\xe7\x33\xc4\x3e\x26\x39\x4d\x63\x3f\x73\x64\x3b\xb4\xfb\x78\xc8\x02\x89\x7f\x72\x1a\x6b\x7a\x59\xba\x51\x8f\x63\x3f\xe9\x7d\x99\xfa\xcd\x32\x1c\x4d\x5b\x05\x83\x01\x14\x4e\x14\xfc\xfb\xf7\x1f\xff\xfc\xf9\x97\x4f\xde\x11\x1a\x8d\x76\x6a\xdb\x7a\xdc\x9b\x3b\xd6\xae\xeb\x92\xdd\x19\xf7\x23\x75\xe8\x44\xad\x71\xbb\xeb\x26\x6e\xb9\xe3\x1d\x97\x68\x8a\xd8\x81\x0a\xe1\x23\x68\x15\x9e\xa3\x29\xdc\x38\xd1\x77\xba\x44\x7d\xb6\xe8\xf8\xc6\xac\x3f\xfe\xa7\xbd\xf0\x12\xa7\xac\x11\xf6\xa8\x58\xa7\x57\x85\x6f\xae\xf5\x7e\x9c\xc2\xcf\x5d\x3a\x99\x0b\x6e\xb7\xc3\x33\x88\xb3\xb8\xb5\xae\xbb\x0c\xda\x63\xee\x88\x66\x72\x86\xb0\x95\x67\x19\x7c\xa8\xb8\xc7\xe2\xe1\x52\x4e\xac\xde\x1d\x9b\xf5\xe1\xe0\x7b\xbd\x6d\x6b\x2f\x4d\x7c\x09\x69\xf0\xae\x15\x89\x36\xd3\x42\xdf\x4d\xa7\x06\x6d\xe2\x25\x5e\x37\x15\x7c\x0f\x3f\xa6\x70\x1a\x50\xf3\xdf\x71\xeb\x2d\xd0\x2b\x5e\xb5\xb5\xb4\x3b\x4f\x35\x70\x45\xfe\x0b\x00\x00\xff\xff\x73\x8d\x4e\x6a\x76\x0c\x00\x00")

func templateCurdTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCurdTmpl,
		"template/curd.tmpl",
	)
}

func templateCurdTmpl() (*asset, error) {
	bytes, err := templateCurdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/curd.tmpl", size: 3190, mode: os.FileMode(420), modTime: time.Unix(1612870525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateCurd_1Tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x97\xc1\x6e\xe3\x36\x10\x86\xcf\xd2\x53\x4c\x75\x58\x48\x81\x96\x6a\xaf\x06\x7c\x68\x9c\xcd\x22\xc0\x22\xdb\x8d\xd3\xf6\xb0\x58\x04\x94\x34\x56\xb8\x91\x49\x9b\xa4\x9a\x75\x0d\xbf\x45\x6f\x05\xfa\x2a\x7d\x9a\x02\x7d\x8c\x62\x48\xc9\x91\x13\x25\xf6\x66\xdb\x1e\x8a\x1e\x02\x28\xe4\xcc\x70\xe6\xfb\x87\x1c\x78\xc1\x8b\x1b\x5e\x21\x08\x69\x51\x4b\x5e\x87\xa1\x98\x2f\x94\xb6\x10\x87\x41\x54\x72\xcb\x73\x6e\x30\x33\xcb\x3a\x0a\x03\x94\xd6\x2c\x6b\x88\x50\xda\x4a\x31\xa1\x32\x94\x36\x2b\x05\xaf\xb1\xb0\xad\x49\x54\x09\x7b\xdd\xe4\xac\x50\xf3\x2c\x47\x69\x70\xce\xb3\x1c\x6d\x2e\x6c\x36\x57\x25\xde\x37\xa9\x84\x7c\x59\x29\x29\x0a\xfa\xa2\x3d\x63\xb5\x90\x95\x89\xc2\x24\x0c\x67\x8d\x2c\x60\xa2\x91\x5b\x5c\xaf\xd9\x25\xcf\x6b\x3c\xe7\x73\x7c\xad\x36\x9b\xb8\x80\xa3\x4a\x48\x36\x51\xd2\xe2\x27\x9b\x42\x99\xc3\x91\x59\xd6\xec\xe4\x38\x05\x95\x7f\x84\x23\x77\x1a\xbb\xef\x97\x40\xac\xd1\x34\xb5\x05\x32\xbe\x70\x9f\x29\xa0\xd6\xf4\xa7\x74\x02\xeb\x30\xc8\x1b\x51\x97\xa8\x61\x34\x26\xa3\x63\xff\x5f\x9c\x84\xc1\xb2\x41\xbd\x4a\x81\xeb\xca\xd0\x66\x6b\xc7\xce\xa4\x41\x6d\x63\x95\x7f\xf4\x67\xc5\x49\xc2\x26\xaa\x6e\xe6\xd2\xb8\xc5\xee\x3b\x61\x8c\x25\xec\x07\x5e\x37\xe8\x37\x4e\x05\xd6\x65\xb7\xfe\x8e\x82\xd3\x29\x1a\x6d\xa3\x25\x94\x39\x7b\xf5\x09\x8b\xb6\xc0\xb8\x48\xa1\x77\x3c\x79\x84\x9b\x96\xd0\x09\xd6\xf8\x90\xd0\xf1\xea\xac\x7c\x92\x92\x28\x49\xf3\x04\xe2\xdd\xea\x09\xde\x68\x0c\x2f\x86\xf9\xad\x37\x9f\xcf\xc7\xe7\xb7\xcb\xe7\xc7\x6b\xd4\x18\xfb\x7e\x62\xaf\xde\xc5\x91\x28\x23\x4a\x29\xe9\x81\xb8\xf2\xc2\x8c\x0f\x40\xd1\x41\x43\xad\xb7\x58\xbe\x5f\x94\x03\x8d\x73\x20\x96\x14\x6e\x70\x05\xbe\x19\x53\xf8\x89\x34\xf3\x37\x64\xc6\x0b\x5c\x6f\xfe\x05\x6a\x3e\xfd\x5d\x6a\x53\xb4\xf1\x0d\xae\xda\x84\xfe\x29\x8a\x5b\x82\xaf\xd1\x3e\xbf\xab\x9e\xb8\x84\xf7\x2f\x1c\x99\xfe\xad\xec\xa6\x48\x2f\xd2\xc0\xe5\x3b\xd5\x6a\xde\xf1\xf2\x54\xfb\x7c\x0f\x03\xba\xa5\xe9\x56\x2e\xd4\xed\xe3\x44\xd9\xb4\xe0\xf2\xc1\x55\xef\x71\x76\x98\x4f\x85\x2c\x3f\xeb\x7d\xd3\xb8\xec\xd0\x0e\xf9\x5e\xe0\xd2\xf3\x37\xf0\xfe\xc3\xe1\x12\x18\x18\x3f\x6e\x4f\x2a\x0c\xc1\x9e\x2e\xeb\xc1\xf4\x35\x2e\x53\x68\x37\xa9\x60\x75\x6b\xfc\x91\xa3\x3b\x74\x4f\x75\xa2\x98\x39\xeb\xaf\xc6\x20\x45\x4d\x09\x76\xcc\x82\x4d\x18\x94\x38\x43\x0d\x14\x93\x4d\x6a\x65\x90\x54\x99\xa9\x76\xe5\x9c\x42\xba\x9a\x0e\xb8\x94\xad\x98\xce\xf1\x11\xad\x06\x52\xd9\xe6\x42\xc9\x74\xe8\xf8\x62\x81\xb2\x74\xd8\xdd\x04\x4a\x5c\xaa\xf7\x6e\xd4\x77\xbc\xc2\xff\xb2\xdc\x54\xdf\x1b\x61\xec\xff\x92\xef\x95\xfc\x52\x59\x5e\x7f\xb9\xee\x96\xc2\xf8\x89\xb5\x2b\xb1\xdf\x18\xc3\xd7\xcf\x57\x72\xa2\x1a\x69\x9f\xf3\xe2\xbd\x70\x87\x3f\x1c\x28\xfb\x4e\xde\x53\x6e\x4a\xaf\xff\xe5\x6a\x81\xed\x60\x4e\x20\xee\x26\xf4\xfb\x0f\x3b\xd3\xf9\xcb\x26\xb2\x71\xe3\x43\xb9\x9d\x17\xed\x30\x98\xb6\x6b\xe4\x68\x6e\x85\x2d\xae\xb7\xc9\xac\xc3\xa0\xe0\x06\xfb\xfd\x3f\x0a\x83\xbb\x28\xfb\xe7\xd2\x5d\x00\xaa\xfc\xd9\xce\x5b\xcd\x9e\x8e\x10\x39\x9b\xf8\x28\x89\x5c\xc3\x86\x7d\xd3\xee\x73\xdf\xa4\x0c\xc3\x20\xcb\x40\xcc\xa8\x49\xd9\x59\x49\x57\x25\x8a\x88\x44\x96\x05\x00\x43\x01\x87\x47\xab\x77\x4f\x12\x17\x6e\xe3\xa3\x16\x94\x1e\xfc\xf9\xfb\x2f\x7f\xfc\xfa\x9b\x7b\x16\x3a\xd0\xe3\xf1\x4e\x95\xbd\x37\xe2\xee\x98\xed\x98\xde\x0c\xb8\x12\xdd\x7d\x5e\x61\x70\x65\xe8\xe7\xcf\x88\x2a\xda\x6a\x4d\x79\x4e\x69\xb9\x13\x3b\x2a\xd1\x14\x11\x81\xf6\xe6\x63\x68\x4b\x3b\x41\x53\x50\x2f\xb3\xb7\xba\x44\x7d\xbc\xea\xf4\x89\xf8\xb0\xfd\xb7\x0f\xcc\x4b\x9c\xf1\xa6\xb6\x07\xd9\x52\xbe\xca\xff\x47\x7d\xe7\x7a\xd9\xff\x82\x62\xd3\x45\x2d\x6c\xdf\x3c\x85\x28\x8d\xda\x77\xf3\x2a\x85\xd6\x8d\x5c\x34\x97\x15\x42\x3f\xce\xda\xbf\x82\xc5\x35\x16\x37\x67\x72\x6a\xf5\x6e\xdf\x6d\xbd\xfd\xab\x3b\xd8\x41\xed\xa9\xb1\xab\x21\xf1\x2f\x67\xbf\xdb\xd8\xdb\xd9\xcc\xa0\x8d\x5d\x8a\xe7\xcd\x1c\x5e\xc2\x37\x09\x1c\x79\xd4\xe2\x67\xec\x5d\x44\xf6\x46\xcc\xdb\x5a\xda\x9d\xc7\x04\xdc\x84\x7f\x05\x00\x00\xff\xff\x2b\xd0\x2d\x9b\xd0\x0e\x00\x00")

func templateCurd_1TmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCurd_1Tmpl,
		"template/curd_1.tmpl",
	)
}

func templateCurd_1Tmpl() (*asset, error) {
	bytes, err := templateCurd_1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/curd_1.tmpl", size: 3792, mode: os.FileMode(420), modTime: time.Unix(1616842711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateCurd_commonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xcd\x6a\xc3\x30\x10\x84\xcf\xd6\x53\x0c\x3e\xd9\x25\x24\xf7\x82\x2f\x6d\x29\x14\x52\x68\xc9\x31\x84\xa0\xca\x6b\x77\xb1\xba\x8a\xa5\xf5\xa1\x04\xbf\x7b\xf1\x4f\x03\x85\x0a\x1d\x56\xf3\x69\x87\xef\x62\x5d\x67\x5b\x02\x8b\x52\x14\xeb\x8d\xe1\xaf\x4b\x88\x8a\xc2\x00\x40\x4e\xa2\x6d\xd8\x72\xd8\x91\xe8\xae\x66\xeb\xc9\x69\x3e\x23\x12\x4d\xbd\xff\xff\xc7\x2e\xf5\x3e\x37\xa5\x31\x2e\x48\x9a\xba\xb2\x43\xef\xdf\x6c\x4b\x7b\x4e\x0a\x54\xc8\x2f\xb6\xa5\xb3\xe7\xa4\xf9\x8d\x3d\x86\x41\xf4\xc6\xdc\xf4\x5a\xe0\x33\x4b\x8d\xf9\x54\xc8\x1b\x96\x7a\xae\x6e\x06\x71\x48\xbd\x7f\x18\xd8\xd7\x14\x8b\x12\x77\x8b\xd2\xf6\x69\x91\x58\x01\xae\x26\x8b\xa4\x43\x14\xfc\xe5\xc5\x2a\xbb\x7d\xfd\x3e\xbc\xef\x4b\x33\xae\x9d\xee\x93\x5c\xf7\x22\x07\x8d\x45\xcd\x09\xc7\x53\xd2\xc8\xd2\x6e\xd0\x61\x99\x4a\x7c\x84\xe0\xa7\xde\x26\x44\xf0\x06\x67\xdc\x57\x88\x56\x5a\xc2\xb4\x71\x35\x59\xc6\xcd\x34\x1e\xf9\x84\xaa\x42\x37\x47\xbf\x16\x1a\x07\x32\x59\x36\x9a\xe9\xae\x59\x63\x7d\x22\x33\xfe\x04\x00\x00\xff\xff\xda\xfd\x5c\xfb\x8e\x01\x00\x00")

func templateCurd_commonTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCurd_commonTmpl,
		"template/curd_common.tmpl",
	)
}

func templateCurd_commonTmpl() (*asset, error) {
	bytes, err := templateCurd_commonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/curd_common.tmpl", size: 398, mode: os.FileMode(420), modTime: time.Unix(1616719136, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttp_bizTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x51\x4f\xdb\x3c\x14\x7d\xb6\x7f\xc5\xfd\x22\x84\x92\x4f\x5d\x22\xed\x11\xa9\x0f\x40\x35\xc4\x0b\x63\x83\xf1\x0a\x8e\x7d\x9b\x5a\xc4\x76\xe7\x38\x65\x69\x94\xff\x3e\xd9\x0d\x1b\x2b\x49\x8a\xb4\x69\x7b\x6b\x73\xee\xb9\x3e\xc7\xe7\x5e\xaf\x19\x7f\x64\x05\xc2\xca\xb9\x35\xa5\x52\xad\x8d\x75\x10\x53\x12\x2d\x95\x8b\x28\x89\x0a\xe9\x56\x75\x9e\x72\xa3\xb2\x1c\x75\x85\x8a\x65\x39\xba\x5c\xba\x4c\x19\x81\xe5\x74\x49\x85\x76\x83\x36\xf3\xbd\x33\xa9\x1d\x5a\xcd\xc6\x18\x85\x61\x42\x49\x9d\xd5\x4e\x96\xd5\x48\x4d\x29\x73\xcb\x6c\x93\xe5\x72\xbb\x57\x51\x48\xfd\xae\x30\x5a\x72\xff\x2b\xa2\x09\xa5\xcb\x5a\x73\x08\x2d\xcf\x8d\x52\x4c\x8b\x98\xc3\xff\x85\xd4\xe9\xb9\xd1\x0e\xbf\xb9\x04\x5a\x4a\xb8\x12\x33\xb8\x87\x93\x39\xf0\xf4\x02\x5d\x1c\x2c\xa5\xa7\x2f\x58\x09\x25\xd5\x93\x74\x7c\x05\x5c\x09\x4f\x69\x5b\xcb\x74\x81\x70\xf4\x88\xcd\x0c\x8e\x6e\x3d\x39\xed\x3a\x4a\x38\xab\x10\x72\xb9\x4d\xdb\x36\xbd\x65\x79\x89\x57\x4c\xe1\x85\xe9\xba\x6b\x56\x60\x75\x42\x09\xf9\x15\xb8\x7b\xdf\x43\x31\x4f\x26\xd8\xa7\x42\x0c\x73\x4f\x85\x98\x66\x2e\xb0\x1c\x66\x2e\xb0\x9c\x66\x7e\xaa\xd1\x36\xc3\xdc\x00\x4d\xb3\xbf\xac\x05\x73\x38\x4c\xdf\x61\x9e\x0f\x00\xd0\xb6\xa8\x85\xbf\xbb\x8e\x76\x94\x8e\xdd\x6c\x9f\xe5\xe8\xed\xbd\x8e\x55\x79\xea\xf1\x2e\xcc\x0f\x52\x8b\x7d\x85\x9f\xf1\x6b\xdb\x51\x62\xac\x40\x7b\xd6\xbc\x9c\x80\x9d\xbd\x28\x20\xf7\x79\x13\xf9\xf8\x8d\x75\x03\x25\xfe\xb3\x87\x75\xad\x06\x50\x5d\xab\xc0\x95\x5b\x1c\xe2\xca\x2d\x46\x09\xa5\x44\xa5\x1f\x77\x1a\x60\x0e\xbd\x1a\xff\xf1\xc6\xef\xe0\x1c\xfc\x11\xfe\xef\x55\xad\x60\x0e\x61\x31\x7c\x93\x4b\xed\x62\x5d\xab\x24\x54\xca\x2d\xee\x63\xbe\xbb\x6f\x8e\xd6\xfa\x83\x55\x7a\x87\x56\x2e\x9b\x38\xa1\xc4\xe2\xba\x6c\x66\xd0\x23\x95\xdd\x0c\x0f\x6b\xcc\x67\xe0\xfb\x3f\xaf\xec\x6e\x23\x16\xcc\x31\x8f\xfc\x6c\x92\xf8\xd8\x46\xc2\x09\xe3\xf9\x3a\x9a\x0d\xb3\xa0\x60\x17\xcd\xfe\xd9\x3f\x24\xf3\xf4\x66\x65\xea\x52\x9c\x49\x2d\xe2\xe3\xa0\x64\x19\x44\xff\x37\x07\x2d\x4b\xdf\x87\x2c\x95\x4b\xaf\xad\xd4\xae\xd4\x71\x90\x42\x7a\xfe\xb0\xaf\x20\x67\x06\xc7\xe3\xb6\xb4\x2c\x0f\x9a\x0a\x9b\x33\x60\xca\x8b\xd6\xf8\x14\x57\xce\xd6\xdc\x05\x7d\x97\x0b\x90\xda\xc1\xc3\xd2\x58\x75\x12\x49\x11\x3d\x50\xd2\x25\x23\x16\x37\x7f\xc2\x62\x10\x37\x83\x4d\x7a\xb9\xf8\x2d\x93\xfd\x8a\xff\x5b\x9b\x87\x27\xb5\x97\x79\xc0\xf0\xdb\x86\xf5\xf9\x59\xfa\xcb\xf3\x3a\x95\xe6\xb3\xa4\xb7\xcf\x2c\xed\x9f\xd3\xef\x01\x00\x00\xff\xff\x0b\x0e\x0d\x39\xd2\x07\x00\x00")

func templateHttp_bizTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttp_bizTmpl,
		"template/http_biz.tmpl",
	)
}

func templateHttp_bizTmpl() (*asset, error) {
	bytes, err := templateHttp_bizTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http_biz.tmpl", size: 2002, mode: os.FileMode(420), modTime: time.Unix(1616847429, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMarkdownTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xc1\x6a\xea\x40\x14\x86\xf7\x81\xbc\xc3\x81\xb8\x50\xb8\xc9\x03\x08\xf7\x6e\xae\x1b\xb9\x17\xeb\x42\xba\x11\x17\xb1\x9e\x16\x69\x92\x96\x68\xa0\x61\x66\xc0\x45\xa1\x85\xd2\xd6\x45\xc1\xac\x0a\x05\x11\xbb\xa8\x52\xda\x82\x98\x3e\x8e\x19\xf5\x2d\x4a\x66\x9c\xd4\x56\x9a\xc5\x84\xf9\xff\xc3\xf9\x4f\xbe\x13\xc3\x80\xd5\xc3\x98\xf7\x62\x3e\x3a\xd7\x35\x5d\xa3\xc9\xfc\x36\xb9\x1c\xd0\x54\x4d\xfa\xd7\x40\x61\x35\x7d\xe5\xd1\x0d\x50\x48\x86\x17\xfc\x65\x0c\x54\xd7\x68\xd1\x34\x4d\x71\xa8\x13\xe4\x4b\xd7\x08\xf1\x6d\xef\x08\xc1\xaa\xd9\x4d\x07\xff\xb7\x3b\x5d\xc6\x28\x10\x62\x95\xbd\x16\x9e\x31\x46\xeb\xe9\x45\x98\x15\xdb\x45\xc6\x1a\x79\xe3\xd3\xfd\x6a\x15\x40\x3e\x94\x10\xeb\xef\x89\xeb\xa2\x27\x9a\x89\x14\xf4\x5a\x8c\xa5\x03\xab\xc0\xdc\x31\x86\xbf\x20\xd7\xee\xa2\x0b\xc5\xdf\x60\x95\xb0\x73\x20\xe3\x75\xcd\x30\x0c\x20\x44\x78\x2a\xc9\x52\xf7\xad\x3c\x5d\xfb\x93\x95\x65\x79\x69\x86\x29\x68\x3c\x0d\xf8\xe4\x4d\xd2\x90\xa4\x84\x00\x14\x96\xcf\x71\x72\x7f\x05\x14\x78\x34\x4d\xfa\xa3\xc5\x6c\xbe\x7c\x9c\x53\x58\xc7\xd1\x6a\x32\x4c\x7a\xef\x99\xc3\xa3\xe9\x62\x16\xaf\xef\x26\xbb\x58\x15\x55\x73\x97\xed\x37\x61\x0b\xb2\x1c\x75\x03\x59\x40\x72\x02\xd7\x93\x1f\x03\x20\xb0\x4b\xa9\x16\x9e\x62\x25\x70\x9b\xe8\x33\x26\xf5\x72\xa7\x12\x38\xce\x66\x37\x25\x3c\xb4\x03\xa7\xbb\x6f\x3b\x01\xaa\x82\xaa\xdf\x76\x6d\x3f\xfc\x87\xa1\x52\x64\xab\x1f\x16\x51\xaf\xed\x55\x1b\x79\x23\xfb\x97\x0a\x99\xf7\x11\x00\x00\xff\xff\x54\x04\xaf\xad\x62\x02\x00\x00")

func templateMarkdownTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMarkdownTmpl,
		"template/markdown.tmpl",
	)
}

func templateMarkdownTmpl() (*asset, error) {
	bytes, err := templateMarkdownTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/markdown.tmpl", size: 610, mode: os.FileMode(420), modTime: time.Unix(1599730646, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x4f\x8b\xa3\x40\x10\xc5\xcf\x5b\x9f\xa2\x10\x59\x74\x09\x7a\x5f\xd8\x53\x42\x72\xdb\xb9\x78\x1b\xe6\xd0\x9a\x8a\xd3\x13\xab\x5b\xda\x16\x46\x9a\xfa\xee\x43\x6b\x42\xfe\x10\x26\x73\x92\x2a\x7f\xef\xf9\xea\xd9\xab\xe6\xa8\x5a\x42\xb6\x7b\xea\x00\x34\xf7\xd6\x79\xcc\xe0\xd7\xa7\xd7\x4c\x98\xb4\xda\xbf\x8f\x75\xd1\x58\x2e\x6b\x32\x03\xb1\x2a\x3b\x5d\x3b\xe5\xa6\x32\x02\x09\xe4\x00\x21\x38\x65\x5a\xc2\xf4\x48\xd3\x0a\xd3\x0a\xff\xfe\xc3\x42\x04\xc0\x4f\x3d\x61\x08\x69\x55\x54\xaa\xee\xe8\xbf\x62\xda\x59\x11\x1c\xbc\x1b\x1b\x8f\xe1\xa2\xfc\x58\x61\xaa\x3d\xf1\x2c\x9d\xe1\x0d\x0d\x8d\x08\x46\x79\x7c\x71\x59\x16\x3b\xbb\xb6\xdd\xc8\x26\xda\x45\xe2\x31\xd3\x29\xd3\x56\x53\xbf\x10\x67\x60\x6b\x1d\x2b\xbf\xd5\xd4\xed\x87\xc5\x5c\x1f\xf0\x5e\xbb\xb8\xaf\x2d\x33\x19\x1f\xa9\xb2\x7c\xf0\x85\x3b\x2a\x04\x32\x7b\x11\x38\x3d\x05\x00\x0e\xa3\x69\x30\x63\xfc\x13\xc2\xed\xfd\x39\xce\x63\x96\xc7\x22\xb4\x69\x31\x80\x23\x3f\x3a\x83\xc9\x35\x2a\x92\x80\x7c\x6b\xb3\x64\x18\xb2\x1c\x5f\xdf\xee\xad\xce\x9b\x80\xcf\x4b\x4e\xce\xe7\x6d\xea\x17\xa7\xe7\x7a\x44\x92\xd5\xe9\x16\x94\x27\x31\x96\x3e\xe7\x14\xda\x78\x72\x07\xd5\x50\x90\xeb\x28\x57\xeb\x9f\xe4\xf9\xcd\xc5\xb3\xdf\x7e\x1b\xee\x34\x7c\x05\x00\x00\xff\xff\x75\x88\x06\x4a\xcd\x02\x00\x00")

func templateModelTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelTmpl,
		"template/model.tmpl",
	)
}

func templateModelTmpl() (*asset, error) {
	bytes, err := templateModelTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.tmpl", size: 717, mode: os.FileMode(420), modTime: time.Unix(1613654646, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModel_replyTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xb1\xaa\xc2\x40\x10\x46\xe1\xfa\xce\x53\xfc\x84\x54\x17\xc9\x03\x04\xec\x44\x3b\x11\x49\x27\x42\xc6\xec\x10\x62\x92\xd9\x90\x8c\xc5\xb2\xcc\xbb\x8b\xb6\xf6\x87\xc3\xb7\x70\x37\x72\x2f\x98\x63\x90\x89\x88\x72\x5e\x59\x7b\x41\x39\x4a\xda\xa1\x6c\x50\xef\x51\xb9\x13\x59\x5a\x04\xc7\x41\x43\xce\x65\x53\x35\xfc\x98\xe4\xcc\xb3\x9c\xa2\xfb\x55\x96\x29\x61\xb3\xf5\xd5\x19\x32\xfd\x1d\xd8\x18\xb7\xfb\xff\x6f\x89\xf6\xb9\x45\xad\x8b\xc0\xc6\x45\x4b\x00\x70\xe1\x7e\x50\xb6\x21\xea\x77\x43\xfe\x31\x88\x06\xf7\x77\x00\x00\x00\xff\xff\xe5\x78\xce\x90\x9b\x00\x00\x00")

func templateModel_replyTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateModel_replyTmpl,
		"template/model_reply.tmpl",
	)
}

func templateModel_replyTmpl() (*asset, error) {
	bytes, err := templateModel_replyTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model_reply.tmpl", size: 155, mode: os.FileMode(420), modTime: time.Unix(1613992842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModel_reqTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xb1\x8e\xc2\x30\x10\x04\xd0\x3a\xfb\x15\xab\x28\xe5\x29\x1f\x10\xe9\x9a\x2b\x8e\x0e\x10\xa4\x27\x4e\xbc\xb2\x4c\x92\xdd\xe0\x98\xc2\xb2\xf6\xdf\x91\xe9\x10\xed\xcc\x1b\x69\x36\x33\xcd\xc6\x11\xae\x62\x69\x01\x80\x9c\x83\x61\x47\xd8\xcc\x94\x7e\xb0\xe9\xb1\xfb\xc5\x56\x15\x20\xa6\x8d\xf0\xdf\xb3\xcd\xb9\xe9\xdb\xde\x8c\x0b\x1d\xcd\x4a\x07\x51\xbd\xd0\x03\xf7\x18\x9e\x53\xc4\x0c\x88\x88\xdf\x04\xaa\x53\xb0\x14\xfe\x52\x81\x9e\x1d\x0e\xf7\x5d\xb8\xab\xa5\xa4\xb7\x31\xd5\x03\x54\x57\x09\xb1\xac\x3f\xc5\x2e\x21\x96\xf6\x6c\x9c\x67\x13\xbd\x30\xe8\xfb\x27\xb1\x55\x7d\x05\x00\x00\xff\xff\x71\xad\x77\x42\xbf\x00\x00\x00")

func templateModel_reqTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateModel_reqTmpl,
		"template/model_req.tmpl",
	)
}

func templateModel_reqTmpl() (*asset, error) {
	bytes, err := templateModel_reqTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model_req.tmpl", size: 191, mode: os.FileMode(420), modTime: time.Unix(1613992842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateOp_codeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\xb1\xaa\xc2\x40\x10\x85\xe1\xfa\xce\x53\x0c\x21\xc5\x15\x24\x0f\x20\xa4\x10\x05\x3b\xd3\xc4\x5a\xc6\xcc\x21\x48\x36\xbb\x4b\xb2\x16\x61\x99\x77\x17\x04\xc1\x22\x5a\x9f\xf3\xfd\x51\xba\x41\x7a\xf0\x18\x14\x8e\x28\x2d\x11\xdc\xc4\x43\x50\xf0\x9c\xa6\xbb\xef\x89\xba\xe0\xe7\xf4\x4f\x39\x4f\xe2\x7b\x70\x39\x60\xd9\x72\xd9\xf2\xae\xe6\xca\x8c\xe8\xaf\x89\x39\x57\xad\xdc\x1c\xce\x32\xe2\x14\xcc\xf6\xaa\xcc\xfc\x0e\xd5\x5c\x7c\x1e\xcc\xae\xa2\x5a\xac\xb9\x23\xdc\x4f\xa7\x70\xab\xee\x12\x55\x12\xbe\xbb\xc7\x6b\x2f\x88\x72\x86\x57\x33\xda\x3c\x03\x00\x00\xff\xff\x81\xfb\xfd\x66\xf8\x00\x00\x00")

func templateOp_codeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateOp_codeTmpl,
		"template/op_code.tmpl",
	)
}

func templateOp_codeTmpl() (*asset, error) {
	bytes, err := templateOp_codeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/op_code.tmpl", size: 248, mode: os.FileMode(420), modTime: time.Unix(1616846254, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatePageTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4b\x6f\xdb\x3c\x10\x3c\x8b\xbf\x62\xc1\x93\x94\x38\x7e\x7c\xc7\x20\xba\x7d\xc7\x22\x0d\x92\xa2\xd7\x9a\x90\x29\x87\x2d\x45\x12\xe4\x0a\xa9\x9b\xf8\xbf\x17\x7c\xe8\x61\x59\x49\x7c\xe8\x49\xe0\xee\x6a\x66\x67\x76\x49\xc3\xaa\x5f\x6c\xcf\xa1\xd1\x3b\x2e\x09\x11\x8d\xd1\x16\x81\x72\x6b\xb5\x75\x94\x90\x4a\x2b\x87\x90\x93\x6c\xb5\x82\xff\x79\xcd\x5a\x89\x4f\xe2\x0f\x87\x25\xc9\xd2\xf1\xbe\x6d\x00\x4a\xd8\xf4\x81\x90\x2f\xe1\xbf\x35\x29\x08\x59\xad\xe0\x49\x34\x46\xf2\x07\xcf\x52\x31\x59\xb5\x92\x21\x07\x5a\x5b\xdd\xd0\x05\x50\xd4\x14\x5e\x04\x3e\xeb\x16\x01\x35\x32\xf9\xa3\xd2\xad\x42\xe7\xff\x8c\x45\x20\xd4\x8e\xff\x06\x87\xcc\x22\xf8\x08\x6c\x48\xdd\xaa\x0a\x72\x03\x57\x0f\x6c\x2f\x14\x43\xa1\x55\x31\x22\xca\x0b\xc8\x43\xa5\x50\xb8\x00\xd4\xfe\x5b\xc0\x2b\xc9\x44\x0d\x66\xe9\x3b\x2e\x4b\x58\xc3\xdb\x1b\x98\x65\x6c\xd7\x1f\x5f\x49\x96\x85\xec\xa2\x0f\xc3\x66\x31\x96\x4d\xb2\x23\xc9\x02\x70\x09\x79\x28\xbd\xd9\x14\x57\xa9\xf8\xda\x7b\x80\x1a\xca\xd8\xe4\x75\x07\x72\xe3\xe3\x96\x63\x6b\x15\x39\x06\x47\x3e\xf3\xe2\xcc\x88\x4b\x1d\x08\xda\xc3\xcf\x51\xf1\x25\x26\xf4\xaa\xe3\x10\x8f\x29\x3f\xb5\x25\xf9\x31\x31\x23\x14\x47\xc2\xce\xd1\x78\xba\x4b\x10\x57\xbd\x4d\x01\x27\xd9\x90\x58\x52\x69\xd9\xd1\x0d\x15\xde\xf7\x90\xfd\xdc\x71\x51\x43\x92\x7c\xd3\x19\xbf\x29\x7a\xfe\x31\xa6\xcf\x8e\x61\x4f\xc2\xe7\x33\x8b\xb3\xfa\xce\xf6\x2d\xff\x5a\xd7\x8e\xe3\x17\xd1\x08\x1c\xcf\x4d\x87\xb0\x9f\x9c\xf4\xa9\x77\x16\x79\x76\x52\x53\x58\xbf\xb1\x11\x2e\x8e\x2b\x00\xf6\x13\xeb\x3a\x87\xdb\xe8\xd5\xb0\xe7\xc9\xc7\xde\xfd\x68\x55\x37\xb6\xa4\x70\xbd\x80\xf5\x54\xb1\x97\x18\x20\x07\xd7\x92\xe2\x8f\xc5\x02\x53\x3b\xa0\x61\x15\xe7\x96\x75\x56\xec\x58\xe7\x78\x3b\x2f\x15\x3c\xac\xf5\x3f\xd7\x3b\x3f\x1c\x6e\x45\x7d\xc8\x0b\x08\xcf\xe0\xc9\x95\xb9\x3b\x65\x8a\xef\xe4\xf2\x9e\xbf\xe4\x54\xb5\x4d\x3c\xd3\x82\x64\x47\xe0\xd2\x71\x78\xff\xaa\x0d\xaf\xe7\xe4\xce\x7d\xc0\xe0\x7c\x7e\x96\xe2\xb2\xdb\xda\x61\x2a\x21\x87\x97\x28\xa9\x06\xc3\x6d\xad\x6d\x03\xc6\x3f\x4e\x4c\xee\xb5\x15\xf8\xdc\x10\x3c\x18\x3e\x2e\x73\x68\xdb\x0a\x3d\x4d\x78\xf8\x85\x42\xd8\xfe\x74\x5a\xdd\x7a\xfd\x74\x4b\xb2\x40\x3d\x0a\xfb\xa6\xe9\xf6\x8c\xef\x91\x1b\x79\x18\x03\x3f\x72\x67\xb4\x72\x7c\x39\xa5\x8c\x95\x03\x6f\x20\x98\x61\x88\x0d\xcd\x74\xf4\xad\x5b\xb9\x2e\x1e\x56\x29\xf4\xf4\x37\x00\x00\xff\xff\xa4\xc5\xc0\x7f\xff\x06\x00\x00")

func templatePageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatePageTmpl,
		"template/page.tmpl",
	)
}

func templatePageTmpl() (*asset, error) {
	bytes, err := templatePageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/page.tmpl", size: 1791, mode: os.FileMode(420), modTime: time.Unix(1613993637, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcd\x6e\x1b\x37\x10\x3e\x2f\x9f\x62\xba\x48\x01\xae\xb3\x59\xa5\x3d\x3a\xd5\xc1\x95\x90\x40\x80\x6b\xb7\xb1\x82\x1e\x0c\x43\xa0\x96\xa3\x35\x2b\x2e\xb9\xe1\x72\x23\xab\x82\x1e\xa1\xf7\x1e\xfa\x00\xbd\xf4\xde\x07\x6a\xde\xa3\x20\x29\xc9\xfa\x8d\x55\xb7\x35\x72\xe3\x72\xe7\x9b\x9f\x8f\xdf\x0c\x59\xb1\x7c\xcc\x0a\x84\x1a\xcd\x07\x91\x23\x21\xa2\xac\xb4\xb1\x40\x49\x14\xa3\x31\xda\xd4\x31\x89\xe2\x42\xd8\xdb\x66\x98\xe5\xba\x6c\x0d\x51\xd5\x58\xb2\xd6\x10\xed\x50\xd8\x56\xa9\x39\xca\x03\x26\x52\x0c\x0d\x33\xd3\x96\xd4\x45\x4c\xa2\x3b\x2b\x4a\x84\x4f\xd9\x39\x83\x2d\x57\x23\x66\xc5\x6d\xab\xb6\xa6\xc9\xed\x76\x26\x85\x50\x2f\x0a\xad\x44\xee\x56\xee\x5f\xc0\x27\x84\xcc\x66\x86\xa9\x02\xe1\xd9\x18\xa7\x29\x3c\xeb\xc3\x69\x1b\xb2\xf9\x9c\x10\x42\x46\x8d\xca\x81\xd6\x70\x72\x15\x0a\x4e\x60\x36\xcb\xfa\x6c\x28\xf1\x82\x95\xf8\x46\xcf\xe7\xdf\xb3\x02\x6b\x9a\xc3\x49\x21\x54\xd6\xd1\xca\xe2\x9d\x4d\xc1\xe0\x7b\x38\xf1\xc5\x66\xaf\x85\xe2\xdb\xa0\xb7\xf8\x3e\x01\x6a\xb0\x92\xd3\x4f\x9b\x55\x72\x9a\x02\x1a\x03\x9e\xdc\x04\x66\x24\x0a\xa8\x36\x28\x9c\xd0\x07\xa0\xc9\xc2\x3a\xeb\x32\xcb\xa0\x0d\x25\x1b\x23\xbd\xbe\x59\x44\xdc\x86\xa4\xf0\x32\x21\xd1\x07\x66\x20\xd7\x8d\xb2\x20\x94\x0d\x9f\x9c\x59\xd6\x2f\x2b\x38\x88\x24\x91\x18\x05\x50\x48\xb6\x0d\x75\xc6\x99\xce\x1c\x37\xfb\x92\xeb\x6b\xcb\x24\xcd\x3d\x4d\xc9\x2b\x0f\xf9\xa2\x0d\x4a\x48\x57\x5f\x64\xd0\x36\x46\x91\x68\x4e\xee\xfd\xc2\x37\x6d\x78\xb9\xef\xef\x22\xb7\xcd\xb8\xfb\x62\x1e\x15\x6e\x83\xad\x85\xeb\xe5\xae\x4f\x1a\xda\x21\x9f\xe5\xe6\x45\x53\x42\xdb\xf9\x75\xab\xe5\xe6\x95\xf8\x19\x17\xbb\x6e\x49\x96\x21\xe6\xc7\xe8\xe9\x8c\xf3\x1d\x35\x95\x70\x80\xf8\x24\xe8\x22\xc8\xa2\x0e\x24\x9c\x2e\x59\xe8\x18\x64\x16\xf7\xf1\x50\x26\x9e\xbb\xbd\x44\xb8\x5d\x47\x46\x24\x78\x0a\x03\xe7\xcd\x60\x9d\x9d\xb3\xda\xf6\x54\x8d\xc6\xf6\x38\x4d\x48\x54\x66\x3d\x0e\x6d\x27\x11\x2a\x78\x42\x22\xa9\x8b\xcb\x2a\x84\xbe\xc0\xc9\x19\x2f\x85\x3a\x77\x5b\x68\x98\x45\x9a\x2f\x2d\x42\x49\xca\x3a\x2d\xfa\x82\xce\x75\xf1\x5a\xa0\xe4\x9d\x5b\xd7\x81\xb4\x4c\x5d\x36\x29\x8c\x98\xac\x71\x05\x7a\x8b\xb9\x36\xfc\xcc\xa1\xfc\x54\xc8\xfa\xa2\x44\xea\x57\x17\x7a\x42\x93\xec\x9d\x12\x77\x34\x59\xd9\x87\xb0\x42\xab\x8e\xe6\xee\x20\x6a\x6b\x84\x2a\x16\xcd\x72\x59\xed\x61\x7c\x17\xda\x15\x75\x25\xd9\xd4\xd9\xac\x92\xdd\x0b\xcd\xae\x82\xf7\xb5\x6c\xeb\x46\x6e\x54\x78\x59\x85\xbd\xcb\x31\x89\x06\x9b\x4a\x0d\x67\xb4\x4e\x55\x0a\xde\x4d\x42\xd6\xcf\xe3\x28\xe5\x74\x51\xee\x28\x47\x70\x77\x46\x6b\x32\xd1\x92\x6f\xc9\xe4\x0d\xda\x6d\x4f\xdf\x4e\x7b\xdc\x65\xe2\x8f\x76\x57\x28\x52\x17\xd9\x8f\xcc\xa8\x11\x8d\x27\xcc\xa8\x7d\x89\x9c\xc2\x97\x75\xec\x03\x25\x1b\xca\xd2\xc6\x0b\x84\xc6\xbd\xee\x5f\x7f\xfe\xf2\xf1\x8f\x5f\x3f\xfe\xf6\xfb\xf5\x8b\xaf\x6e\xe2\xc4\x6b\x6e\x9d\x9a\x2e\x4a\xdc\x95\xef\x03\xa9\x6d\x69\xd8\x96\x5e\x94\xf7\xa3\x72\xa7\x81\xbc\xcd\x42\xcc\xfc\x3f\xd3\xb1\x75\x13\xc9\x53\x6d\x4d\xf3\x64\x42\xee\xa2\x7c\xac\x90\xbb\x28\x3f\x1f\x21\xff\xd0\xa0\x99\x1e\x94\x32\x3d\x78\x7d\xad\xdf\x91\x3e\xe2\x51\x02\x3f\x2a\xa5\x77\x15\xf7\x45\x3d\x62\x30\x0b\xee\xf4\xe4\x06\xe6\xd3\x74\x5f\x48\xf5\x9f\x35\xe0\xd7\xcb\x06\x54\x3e\xb3\xf0\x7e\xf2\x76\xee\xaa\x50\x59\x9f\x15\x0b\x01\xc5\x3f\xd5\xda\xbd\x9e\x06\x0a\x27\xbe\xb5\xb2\xef\x58\x45\x13\x42\x22\xbd\x0d\xd5\xd2\x15\xa0\xf7\x81\xb5\xf4\xa4\xe8\x15\x78\xa4\x0d\x0c\x52\x18\xe3\xd4\xdf\x38\xfe\x39\x56\x66\x1d\x2d\x9b\x52\xd5\xd4\x9f\xa9\xa3\xc2\x45\xbd\x1e\xe3\xf4\xc6\x11\xe2\xbc\x84\x0f\xf7\x37\x1a\xac\xb4\x18\x18\x38\x4c\xab\x8f\x93\xde\x3b\x73\x0c\xcd\xc3\x03\xe0\xdf\xf6\x7f\x1f\xcb\x8a\xc6\x82\xc7\x21\xce\xda\x65\x06\xcf\x21\x7e\x15\xc3\xf3\x83\x17\xdf\x93\x8f\x8b\x40\xd3\x63\x27\x46\x40\xff\x6f\x43\x63\x7b\x6a\xb8\x57\x3a\x2a\x3e\x9f\xff\x1d\x00\x00\xff\xff\x9d\x97\x72\xf1\x82\x0c\x00\x00")

func templateServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceTmpl,
		"template/service.tmpl",
	)
}

func templateServiceTmpl() (*asset, error) {
	bytes, err := templateServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service.tmpl", size: 3202, mode: os.FileMode(420), modTime: time.Unix(1616846254, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/admin_cmd.tmpl":   templateAdmin_cmdTmpl,
	"template/biz.tmpl":         templateBizTmpl,
	"template/curd.tmpl":        templateCurdTmpl,
	"template/curd_1.tmpl":      templateCurd_1Tmpl,
	"template/curd_common.tmpl": templateCurd_commonTmpl,
	"template/http_biz.tmpl":    templateHttp_bizTmpl,
	"template/markdown.tmpl":    templateMarkdownTmpl,
	"template/model.tmpl":       templateModelTmpl,
	"template/model_reply.tmpl": templateModel_replyTmpl,
	"template/model_req.tmpl":   templateModel_reqTmpl,
	"template/op_code.tmpl":     templateOp_codeTmpl,
	"template/page.tmpl":        templatePageTmpl,
	"template/service.tmpl":     templateServiceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"admin_cmd.tmpl":   &bintree{templateAdmin_cmdTmpl, map[string]*bintree{}},
		"biz.tmpl":         &bintree{templateBizTmpl, map[string]*bintree{}},
		"curd.tmpl":        &bintree{templateCurdTmpl, map[string]*bintree{}},
		"curd_1.tmpl":      &bintree{templateCurd_1Tmpl, map[string]*bintree{}},
		"curd_common.tmpl": &bintree{templateCurd_commonTmpl, map[string]*bintree{}},
		"http_biz.tmpl":    &bintree{templateHttp_bizTmpl, map[string]*bintree{}},
		"markdown.tmpl":    &bintree{templateMarkdownTmpl, map[string]*bintree{}},
		"model.tmpl":       &bintree{templateModelTmpl, map[string]*bintree{}},
		"model_reply.tmpl": &bintree{templateModel_replyTmpl, map[string]*bintree{}},
		"model_req.tmpl":   &bintree{templateModel_reqTmpl, map[string]*bintree{}},
		"op_code.tmpl":     &bintree{templateOp_codeTmpl, map[string]*bintree{}},
		"page.tmpl":        &bintree{templatePageTmpl, map[string]*bintree{}},
		"service.tmpl":     &bintree{templateServiceTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
