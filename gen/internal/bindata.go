// Code generated by go-bindata.
// sources:
// template/admin_cmd.tmpl
// template/admin_command_biz.tmpl
// template/bb_admin_api_biz.tmpl
// template/bb_admin_biz.tmpl
// template/biz.tmpl
// template/curd.tmpl
// template/curd_1.tmpl
// template/curd_common.tmpl
// template/markdown.tmpl
// template/model.tmpl
// template/model_reply.tmpl
// template/model_req.tmpl
// template/op_code.tmpl
// template/page.tmpl
// template/service.tmpl
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateAdmin_cmdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x3d\x6b\xc3\x30\x10\x86\xe7\xdc\xaf\x38\x42\x86\x16\x4a\xa6\xd2\x21\x90\x21\x34\x50\x32\xf4\x2b\xa4\x73\x7c\xb1\x0e\x5b\x75\x2c\xa9\xf6\x79\x70\x85\xfe\x7b\x91\x48\x9b\x50\xc7\xda\xf4\x3e\x0f\xf7\x72\x92\xa3\xbc\xa2\x82\xf1\xa0\xbf\x01\xa4\x77\x8c\x2b\x55\x6b\xb3\xe5\xaf\x8e\x5b\xc1\x56\x9a\x2e\x17\xf4\x30\x79\x75\xdc\x90\xd8\x06\x31\x86\xda\x14\x88\x98\x7d\xb6\xd6\x2c\xa6\xf6\x84\xa6\xd9\x59\xdb\xa8\x51\x6d\xaf\x55\x34\x77\xb6\x62\x83\xe9\xfc\x37\x25\xa2\xe8\xac\x3a\x29\xf1\xba\x43\x9d\x94\x51\xd9\x38\xc4\x11\x45\xbb\xd4\xf3\xc7\x51\x1b\x79\xb8\xc7\x8b\x9e\xc8\xb7\x38\x3a\x20\x6d\xf4\x58\xab\x5f\x9e\x9e\x26\xde\x4f\x3c\xaf\xd3\x26\xcf\x2c\xa5\x55\x57\x27\xd4\x09\x45\x69\x4d\x42\x23\x35\x8a\x84\xa6\x19\x84\xcb\x0f\x88\x2d\xda\x08\x40\x6e\x4d\x2b\x78\x03\x93\xfd\x19\x2c\x51\x5b\x21\xf0\xbe\x21\x53\x30\xce\x2a\xee\xef\x70\xb6\xc3\xc5\x12\xe7\x21\xc0\xc4\xfb\xf9\x8e\x0e\x47\x7e\xa1\x9a\x9f\x6c\x08\x2b\xa5\x86\xe1\x9a\x8f\xc3\xf0\xc3\x29\x12\x1e\xe6\xef\x1d\x37\xfd\x30\x7e\xa3\x82\x5b\xf0\x9e\x8d\x0a\x01\x6e\xe1\x27\x00\x00\xff\xff\x20\xaa\xa9\x26\x4e\x02\x00\x00")

func templateAdmin_cmdTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateAdmin_cmdTmpl,
		"template/admin_cmd.tmpl",
	)
}

func templateAdmin_cmdTmpl() (*asset, error) {
	bytes, err := templateAdmin_cmdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/admin_cmd.tmpl", size: 590, mode: os.FileMode(420), modTime: time.Unix(1616847902, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateAdmin_command_bizTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\xc1\x6e\xdb\x3a\x10\x3c\x93\x5f\xb1\x4f\x08\x02\xe9\xc1\x95\x81\x1e\x03\xf8\x90\xc4\x68\x90\x4b\x9a\x36\x69\xae\x09\x45\xae\x65\x22\xe2\xca\xa5\x28\xa7\xb2\xa0\x7f\x2f\x48\x2b\x6d\xea\xc8\x72\x80\x16\xed\xcd\xd6\xec\x2c\x67\x38\xbb\x5c\x09\xf9\x28\x72\x84\xa5\x73\x2b\xce\xb5\x59\x95\xd6\x41\xcc\x59\xb4\x30\x2e\xe2\x2c\xca\xb5\x5b\xd6\x59\x2a\x4b\x33\xcd\x90\x2a\x34\x62\x9a\xa1\xcb\xb4\x9b\x9a\x52\x61\x31\x5e\x52\xa1\x5d\xa3\x9d\xfa\xde\x53\x4d\x0e\x2d\x89\x03\x8c\xda\xe9\xa2\xda\x53\x52\xe8\xcc\x0a\xdb\x4c\x33\xbd\xd9\xa9\xc8\x35\xbd\xcb\x4b\xd2\xd2\xff\x8a\x78\xc2\xf9\xa2\x26\x09\x42\x19\x4d\xe7\xa5\x31\x82\x54\x2c\xe1\xff\x5c\x53\x7a\x5e\x92\xc3\x6f\x2e\x81\x96\x33\x69\xd4\x04\xee\xe1\x64\x06\x32\xbd\x40\x17\x07\x47\xe9\xe9\x0b\x56\xc2\x59\xf5\xa4\x9d\x5c\x82\x34\xca\x53\xda\xd6\x0a\xca\x11\x8e\x1e\xb1\x99\xc0\xd1\xad\x27\xa7\x5d\xc7\x99\x14\x15\x42\xa6\x37\x69\xdb\xa6\xb7\x22\x2b\xf0\x4a\x18\xbc\x28\xbb\xee\x5a\xe4\x58\x9d\x70\xc6\x7e\x05\xee\xde\xf7\x50\x2c\x93\x11\xf6\xa9\x52\xc3\xdc\x53\xa5\xc6\x99\x73\x2c\x86\x99\x73\x2c\xc6\x99\x9f\x6a\xb4\xcd\x30\x37\x40\xe3\xec\x2f\x2b\x25\x1c\x0e\xd3\xb7\x98\xe7\x03\x00\xb4\x2d\x92\xf2\x77\xd7\xf1\x8e\xf3\x7d\x37\xdb\x67\xb9\xf7\xf6\x5e\xc7\x6a\x3c\xf5\x78\x1b\xe6\x07\x4d\x6a\x57\xe1\x67\xfc\xda\x76\x9c\x95\x56\xa1\x3d\x6b\x5e\x4e\xc0\xd6\x5e\x14\x90\xfb\xac\x89\x7c\xfc\xa5\x75\x03\x25\xfe\xb3\x87\xa9\x36\x03\x28\xd5\x26\x70\xf5\x06\x87\xb8\x7a\x83\x51\xc2\x39\x33\xe9\xc7\xad\x06\x98\x41\xaf\xc6\x7f\xbc\xf1\x2b\x38\x03\x7f\x84\xff\x7b\x55\x1b\x98\x41\x58\x0c\xdf\xe4\x92\x5c\x4c\xb5\x49\x42\xa5\xde\xe0\x2e\xe6\xbb\xfb\xe6\x68\xad\x3f\xd8\xa4\x77\x68\xf5\xa2\x89\x13\xce\x2c\xae\x8a\x66\x02\x3d\x52\xd9\xf5\xf0\xb0\xc6\x72\x02\xbe\xff\xf3\xc6\x6e\x37\x62\x2e\x9c\xf0\xc8\xcf\x26\x89\x8f\x6d\x4f\x38\x61\x3c\x5f\x47\xb3\x16\x16\x0c\x6c\xa3\xd9\x3d\xfb\x87\x64\x99\xde\x2c\xcb\xba\x50\x67\x9a\x54\x7c\x1c\x94\x2c\x82\xe8\xff\x66\x40\xba\xf0\x7d\xd8\xc2\xb8\xf4\xda\x6a\x72\x05\xc5\x41\x0a\xeb\xf9\xc3\xbe\x82\x9c\x09\x1c\xef\xb7\x45\xba\x38\x68\x2a\x6c\xce\x80\x29\x2f\x9a\xf0\x29\xae\x9c\xad\xa5\x0b\xfa\x2e\xe7\xa0\xc9\xc1\xc3\xa2\xb4\xe6\x24\xd2\x2a\x7a\xe0\xac\x4b\xf6\x58\x5c\xff\x09\x8b\x41\xdc\x04\xd6\xe9\xe5\xfc\xb7\x4c\xf6\x2b\xfe\x6f\x6d\x1e\x9e\xd4\x5e\xe6\x01\xc3\x6f\x1b\xd6\xe7\x67\xe9\x2f\xcf\xeb\x58\x9a\xcf\x92\xde\x3e\xb3\xbc\x7f\x4e\xbf\x07\x00\x00\xff\xff\x2a\xf8\xb9\xf7\xd1\x07\x00\x00")

func templateAdmin_command_bizTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateAdmin_command_bizTmpl,
		"template/admin_command_biz.tmpl",
	)
}

func templateAdmin_command_bizTmpl() (*asset, error) {
	bytes, err := templateAdmin_command_bizTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/admin_command_biz.tmpl", size: 2001, mode: os.FileMode(420), modTime: time.Unix(1617101172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateBb_admin_api_bizTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x41\x6f\xd3\x30\x14\xc7\xcf\xf5\xa7\x78\x8a\x76\x48\xa6\x62\x0b\x8e\x48\x1c\x32\x06\x95\x38\x6c\x63\x2d\x5c\x91\x63\x3f\x5c\x6b\x8e\x6d\x1c\xa7\xa2\x8a\xfc\xdd\x51\xdc\x4d\x0c\xa6\x44\x9d\xda\x5b\xa2\xe7\xf7\xcb\xef\xe5\xfd\xed\xb9\x78\xe0\x0a\x41\x38\x1b\x83\x33\x06\x03\x21\xba\xf5\x2e\x44\x28\xc9\xa2\x50\x3a\x6e\xfb\x86\x0a\xd7\xb2\x06\x6d\x87\x2d\x67\x0d\xc6\x46\x47\xa6\x8c\x6b\xb8\x29\x66\xcf\x74\x18\x76\x18\xd8\x36\x46\xcf\xb4\x8d\x18\xec\x8b\x0e\xa5\xed\x1b\xe5\xac\x16\xe3\x53\x41\x2a\x42\x7e\xf6\x56\x40\xf9\x23\x6e\x75\x07\x97\xb5\xd7\x75\x1f\xb7\x15\xdc\xa3\xd2\x5d\xc4\x70\x75\x55\xcb\x56\xdb\x7b\xd7\x47\x2c\x15\x5c\x2a\x6d\x69\x7e\x09\xab\xe0\x7a\x5f\xc1\x40\x86\x21\x70\xab\x10\x2e\x1e\x70\xbf\x84\x8b\x0d\xbc\xff\x00\x34\x25\xb2\x50\x74\xf5\x69\x53\x16\x8c\x7b\xcd\x76\x6f\xd9\x30\xd0\x0d\x6f\x0c\xde\xf0\x16\x53\x62\x9e\x2b\xec\x8a\x25\xe4\x2f\xd3\xe7\xc5\x95\xfb\xfe\x2e\xa5\xbb\xb1\x5e\x01\x00\x8c\xa4\xbb\xdb\xf5\x34\x8a\x4b\x39\x03\xaa\xa5\xcc\x98\x63\x48\x12\xcd\x0c\xe9\x1a\xcd\x73\xd2\xdc\x74\xbf\x7a\x0c\xfb\x19\xd4\xd7\xb1\x7e\xdc\x74\xbd\x97\x3c\xe2\x0c\xeb\x5b\x3e\x50\x01\x19\x06\xb4\x32\x25\x42\x12\x99\xdc\xca\xc4\xbe\x27\xfe\x7f\x29\x0e\x2b\xff\xe8\x6c\xc4\xdf\x71\x5c\xf7\x22\xa0\x37\xfb\x25\x60\x08\x23\xf3\x90\x4b\xba\x0e\x3b\xfa\x59\x5b\xf9\x2f\xe7\x40\x29\x45\x45\x16\x4f\x79\xa4\x39\x4f\x5f\xd6\xb7\x37\xa5\x58\xc2\x5f\x56\x45\x5e\xe1\x56\x4b\xf9\x2a\xb3\xff\xad\x72\xff\xb9\xa5\xae\xd1\x9c\x24\x95\xfb\xcf\x2d\x95\x73\x76\x92\xd6\x23\xe1\xdc\x62\x87\xd0\x9e\x64\xf6\x84\x38\x56\xed\xf1\x7a\xfc\x09\x00\x00\xff\xff\x06\xf8\xef\x4d\x83\x05\x00\x00")

func templateBb_admin_api_bizTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateBb_admin_api_bizTmpl,
		"template/bb_admin_api_biz.tmpl",
	)
}

func templateBb_admin_api_bizTmpl() (*asset, error) {
	bytes, err := templateBb_admin_api_bizTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/bb_admin_api_biz.tmpl", size: 1411, mode: os.FileMode(420), modTime: time.Unix(1617101172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateBb_admin_bizTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\xd2\x3f\x6b\xf3\x30\x10\x06\xf0\x39\xfa\x14\x47\xc8\x60\x87\xbc\xf2\xfe\x42\x07\xd3\xd0\x6e\xa5\x4d\xd3\x0f\x20\x59\x57\xf5\xa8\xfe\xb8\x67\xb9\xd4\x11\xfa\xee\x25\xe9\x16\x32\x78\xf2\x70\x70\x1c\x0f\x3c\xbf\xe1\xc8\xf7\x91\x13\x54\x62\xb5\xb6\x94\x3e\x46\x2d\xbb\xe8\x1b\x8d\x61\x40\xaf\x1a\x8d\x49\x53\x6a\x7c\x34\xe8\xd6\xb7\x23\x8e\x34\x2b\x9e\x1a\x4d\xa7\xab\x84\xa5\xf0\xcf\xc6\x40\xdd\x79\x5b\x8b\x5a\x88\x9c\x59\x05\x8b\xb0\xf9\xc4\x69\x07\x9b\x23\xfc\xbf\x03\x59\x8a\x10\xef\x63\xe8\xa0\x1a\x60\xfb\x8a\xfc\x4d\x1d\xd6\xf0\x40\xc1\xe4\x2c\x8f\x4a\x3b\x7c\x52\x1e\x1f\x63\x29\xcf\xca\x62\xd5\xc1\xd6\x52\x90\xf7\x31\x24\xfc\x49\x35\x54\x8c\xbd\x9b\x60\x7b\x31\xca\xd6\x78\x0a\x6d\x4f\x87\xf3\x71\x07\xc8\x7c\x9e\xc8\x35\x64\xb1\x62\x4c\x23\x07\x18\xa4\x89\x07\xfc\x1a\x71\x48\x55\xb7\x03\x4d\x27\x79\xab\x69\xa8\xc5\x4d\xd9\x75\xb6\x35\x66\x19\x54\x6b\xcc\x4c\xd2\x1e\xdd\x32\xa4\x3d\xba\x99\xa4\x97\x11\x79\x5a\x06\x75\xa9\x9a\xc9\x7a\xeb\x8d\x4a\x0b\x3d\xd5\x5f\xd7\x05\x96\x33\x06\x53\xca\x6f\x00\x00\x00\xff\xff\x9d\x89\xef\x9a\x7d\x03\x00\x00")

func templateBb_admin_bizTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateBb_admin_bizTmpl,
		"template/bb_admin_biz.tmpl",
	)
}

func templateBb_admin_bizTmpl() (*asset, error) {
	bytes, err := templateBb_admin_bizTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/bb_admin_biz.tmpl", size: 893, mode: os.FileMode(420), modTime: time.Unix(1617101172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateBizTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\xd2\x31\xab\xdb\x30\x10\x07\xf0\x39\xfa\x14\x87\x79\x83\x1d\x54\x79\x2f\x74\xe9\x7b\xf4\xd1\xa5\x94\x90\x4e\xa5\xc3\xd9\xba\xa8\x22\xb6\x14\xcb\x72\x69\x10\xfa\xee\x25\x4e\x4d\xc1\x91\x1d\x9a\xe1\x0d\x06\x0d\xa7\xfb\xff\x7c\xba\x13\xd6\x47\x54\x04\x12\x2d\x63\xba\x3d\x59\xe7\x21\x67\x9b\x4c\xa2\xc7\x0a\x7b\x2a\xfb\xae\xc9\xd8\x26\x53\xda\xff\x1c\x2a\x51\xdb\xb6\xac\xc8\xf4\xd4\x62\x59\x91\xaf\xb4\x2f\x25\xda\x52\x1b\x4f\xce\xe0\x9d\xca\xd6\x4a\x9a\x97\x28\x6d\xde\x29\x6b\x74\x7d\x39\x65\xac\x60\x2c\x04\x87\x46\x11\x3c\x1d\xe9\xcc\xe1\x69\x0f\xef\x3f\x80\x88\x91\x31\x76\x18\x4c\x0d\xb9\x84\xed\x0b\xda\x02\x9e\x1d\xa1\xa7\x10\xc4\x1e\xab\x86\xbe\x60\x4b\xaf\x36\xc6\xbc\x86\xad\xd2\x46\x3c\x5b\xe3\xe9\xb7\xe7\xd0\xc2\x76\xcc\x15\xf3\xca\x02\x72\x47\xfd\xd0\x78\xe8\xbb\x46\xec\xc6\x23\x07\x72\xee\xf2\x59\x57\x40\x60\x1b\x47\x7e\x70\x06\xa6\xdf\x13\x4b\x99\x1c\xa4\x90\x15\x87\xb6\x60\x71\xee\x7c\xa1\x86\x6e\xef\x7c\x3c\x7f\x96\x37\x56\x2d\x2f\x51\xc5\x15\x90\xca\x5f\xeb\x35\x19\xb4\x4c\x20\xbe\x9d\x64\x02\xbe\x82\xe0\x70\xa4\x33\xf4\xde\x69\xa3\x38\xfc\xc2\x66\xa0\x2b\xe3\x80\x35\x85\xb8\x62\x5c\x8b\xfa\x67\x1c\xfb\xff\x6d\x9c\xf0\xbe\x92\xff\xaf\x89\xe5\x0b\x8f\xcc\x57\x1e\x73\x31\x63\x75\x92\x9f\xb4\x91\x77\x97\xce\x51\x37\xad\x5d\xaa\x7e\x47\x5d\x01\xf9\xf7\x1f\x0f\xa0\xd3\xf1\x93\xd8\x51\x97\x20\x7f\x45\x45\xa9\x7b\x7b\xeb\xb1\x79\xcc\x3e\x6e\xc8\xb2\xf2\x4e\xe2\x63\xdc\x37\x9c\xf2\x32\x61\x4e\x67\x21\x90\x91\x31\xfe\x09\x00\x00\xff\xff\x99\x70\x5a\xa1\x48\x05\x00\x00")

func templateBizTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateBizTmpl,
		"template/biz.tmpl",
	)
}

func templateBizTmpl() (*asset, error) {
	bytes, err := templateBizTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/biz.tmpl", size: 1352, mode: os.FileMode(420), modTime: time.Unix(1617101172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateCurdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\xcf\x6e\xe3\x36\x10\xc6\xcf\xe2\x53\x4c\x75\x08\xa4\x40\xa5\xdb\xab\x01\x1f\x1a\x67\xb3\x08\x10\x64\x91\x75\xda\x1e\x16\x8b\x80\x92\xc6\x0e\x37\x14\x69\x91\x54\xb3\xae\xe1\xb7\xe8\xad\x40\x5f\xa5\x4f\x53\xa0\x8f\x51\x90\x94\xfc\x67\xad\xc4\xce\x6e\x7a\x8a\x4d\x0e\x87\xdf\xfc\x66\xf8\xc5\x73\x56\x3c\xb0\x19\x02\x97\x16\xb5\x64\x82\x10\x5e\xcd\x95\xb6\x90\x90\x28\x9e\x71\x7b\xdf\xe4\xb4\x50\xd5\x20\x47\x69\xb0\x62\x03\xc1\x73\xcd\xf4\x62\x50\x28\x69\xf1\xb3\x8d\x9f\x8f\x32\xb5\x88\x49\x84\xd2\x9a\x5a\x40\x8c\xd2\xce\x14\xe5\x6a\x80\xd2\x0e\x4a\xce\x04\x16\xb6\x0d\x89\x8d\xd5\x5c\xce\x4c\x4c\x52\x42\xa6\x8d\x2c\x60\xac\x91\x59\x5c\x2e\xe9\x2d\xcb\x05\x5e\xb3\x0a\xdf\xaa\xd5\x2a\x29\xe0\xb4\xbd\x9a\x8e\xc3\xdf\x0c\xca\x1c\x4e\x4d\x2d\xe8\xf9\x59\x06\x2a\xff\x04\xa7\x95\x2a\x51\xd0\x2f\xcf\xa6\x90\xa0\xd6\x80\x5a\x2b\x9d\xc2\x92\x44\x79\xc3\x45\x89\x1a\x86\x23\x30\xb5\x38\x0b\xdf\x92\x94\x44\x75\x83\x7a\x91\x01\xd3\x33\xe3\x36\xdb\x38\x7a\x29\x0d\x6a\x9b\xa8\xfc\x53\x48\x9c\xa4\x29\x1d\x2b\xd1\x54\xd2\xf8\xc5\xee\x73\x4a\x29\x4d\xe9\x2f\x4c\x34\x18\x36\x2e\x38\x8a\xb2\x5b\xbf\x71\xc9\xdd\x2d\x77\x99\xd3\x02\x23\x28\x73\xfa\xe6\x33\x16\x6d\x3d\x49\x91\xc1\x96\x00\x77\x86\x44\x1a\x6d\xa3\xa5\x8b\x27\xab\x16\xd0\x39\x0a\xdc\x07\x74\xb6\xb8\x2c\x0f\x42\xe2\x25\x04\xde\x7b\x48\x1c\xbe\xe1\x08\x4e\xfa\x09\x2e\x57\x2f\x87\x16\x64\xee\x42\xfb\xf5\x1e\x35\x26\x61\x2c\xe8\x9b\x9b\x24\xe6\x65\xec\x54\xa5\xaf\x47\xe7\xe7\x79\xd9\x33\x3e\x2f\xa3\x93\xc1\x03\x2e\xd6\x9f\x7f\x73\xfd\x0c\xef\x64\xca\x0a\x5c\xee\xcf\xd3\xeb\xc3\x0b\x55\xec\xc2\x9b\xa0\x4d\x1e\x70\xd1\x0a\xfa\xbf\x60\xae\x41\xbe\x45\xfb\xcd\x33\xf6\xcc\xa3\x0c\xc2\x76\x19\xbe\x2a\xc2\x09\x3a\x9b\xe9\x79\x9f\x17\x5a\x55\x1d\xb6\x00\x77\x1b\xf3\x71\x5c\xd7\x50\xfd\xca\x7b\xf5\xf8\x34\x58\x3a\x29\x98\xdc\x73\x83\x3d\xdc\x17\x5c\x96\x2f\x36\x3d\x8d\x75\xc7\xb7\xef\xfc\x7b\xac\x43\x13\x0c\x7c\xf8\x78\x7c\x1f\x0c\x8c\x9e\x8e\x77\xad\xe8\x23\x3e\xa9\x45\x6f\x09\x1a\xeb\x0c\x26\x37\x57\xb7\x8b\x39\x5e\x71\x63\x5d\xe5\xea\xd1\x84\x6b\x87\x1b\x86\xcf\x4d\x26\x9f\xfa\xe8\xef\x46\x20\xb9\x70\x22\x3b\x78\xd1\x8a\x44\x25\x4e\x51\x83\xcb\x49\xc7\x42\x19\x74\xed\x99\xaa\x76\xe5\xda\xa5\xf4\x75\x1d\xf1\x48\xdb\xae\xfa\x83\x4f\x34\xad\x47\xca\x5a\x8b\x13\xd3\xe1\x63\xf3\x39\xca\xd2\xa3\xf7\xff\x9a\x52\x2f\xf5\x88\x96\xdf\x2a\xcb\xc4\xeb\xf4\xdd\xba\x54\xce\xb7\xbe\x6c\x71\xd8\x18\xc1\x0f\x5f\xdf\xc9\xb1\x6a\xa4\xfd\x9a\x77\x70\xe2\x2f\xdf\x1f\xff\x43\x37\x1f\x28\x37\x73\x9e\xe0\x84\x6d\xbc\xa7\xb3\xef\x0f\x1f\x77\xac\xfb\xdb\xec\xda\x78\x53\x51\x7e\xe7\xa4\xb5\x88\x49\xbb\xe6\x0e\x9a\x47\x6e\x8b\xfb\xb5\x98\x25\x89\x0a\x66\x70\x7b\xfe\x87\x24\xda\x64\x39\xec\x56\xbb\x09\x3c\xf6\xe7\x33\xc4\x3e\x26\x39\x4d\x63\x3f\x73\x64\x3b\xb4\xfb\x78\xc8\x02\x89\x7f\x72\x1a\x6b\x7a\x59\xba\x51\x8f\x63\x3f\xe9\x7d\x99\xfa\xcd\x32\x1c\x4d\x5b\x05\x83\x01\x14\x4e\x14\xfc\xfb\xf7\x1f\xff\xfc\xf9\x97\x4f\xde\x11\x1a\x8d\x76\x6a\xdb\x7a\xdc\x9b\x3b\xd6\xae\xeb\x92\xdd\x19\xf7\x23\x75\xe8\x44\xad\x71\xbb\xeb\x26\x6e\xb9\xe3\x1d\x97\x68\x8a\xd8\x81\x0a\xe1\x23\x68\x15\x9e\xa3\x29\xdc\x38\xd1\x77\xba\x44\x7d\xb6\xe8\xf8\xc6\xac\x3f\xfe\xa7\xbd\xf0\x12\xa7\xac\x11\xf6\xa8\x58\xa7\x57\x85\x6f\xae\xf5\x7e\x9c\xc2\xcf\x5d\x3a\x99\x0b\x6e\xb7\xc3\x33\x88\xb3\xb8\xb5\xae\xbb\x0c\xda\x63\xee\x88\x66\x72\x86\xb0\x95\x67\x19\x7c\xa8\xb8\xc7\xe2\xe1\x52\x4e\xac\xde\x1d\x9b\xf5\xe1\xe0\x7b\xbd\x6d\x6b\x2f\x4d\x7c\x09\x69\xf0\xae\x15\x89\x36\xd3\x42\xdf\x4d\xa7\x06\x6d\xe2\x25\x5e\x37\x15\x7c\x0f\x3f\xa6\x70\x1a\x50\xf3\xdf\x71\xeb\x2d\xd0\x2b\x5e\xb5\xb5\xb4\x3b\x4f\x35\x70\x45\xfe\x0b\x00\x00\xff\xff\x73\x8d\x4e\x6a\x76\x0c\x00\x00")

func templateCurdTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCurdTmpl,
		"template/curd.tmpl",
	)
}

func templateCurdTmpl() (*asset, error) {
	bytes, err := templateCurdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/curd.tmpl", size: 3190, mode: os.FileMode(420), modTime: time.Unix(1612870525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateCurd_1Tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x97\xc1\x6e\xe3\x36\x10\x86\xcf\xd2\x53\x4c\x75\x58\x48\x81\x96\x6a\xaf\x06\x7c\x68\x9c\xcd\x22\xc0\x22\xdb\x8d\xd3\xf6\xb0\x58\x04\x94\x34\x56\xb8\x91\x49\x9b\xa4\x9a\x75\x0d\xbf\x45\x6f\x05\xfa\x2a\x7d\x9a\x02\x7d\x8c\x62\x48\xc9\x91\x13\x25\xf6\x66\xdb\x1e\x8a\x1e\x02\x28\xe4\xcc\x70\xe6\xfb\x87\x1c\x78\xc1\x8b\x1b\x5e\x21\x08\x69\x51\x4b\x5e\x87\xa1\x98\x2f\x94\xb6\x10\x87\x41\x54\x72\xcb\x73\x6e\x30\x33\xcb\x3a\x0a\x03\x94\xd6\x2c\x6b\x88\x50\xda\x4a\x31\xa1\x32\x94\x36\x2b\x05\xaf\xb1\xb0\xad\x49\x54\x09\x7b\xdd\xe4\xac\x50\xf3\x2c\x47\x69\x70\xce\xb3\x1c\x6d\x2e\x6c\x36\x57\x25\xde\x37\xa9\x84\x7c\x59\x29\x29\x0a\xfa\xa2\x3d\x63\xb5\x90\x95\x89\xc2\x24\x0c\x67\x8d\x2c\x60\xa2\x91\x5b\x5c\xaf\xd9\x25\xcf\x6b\x3c\xe7\x73\x7c\xad\x36\x9b\xb8\x80\xa3\x4a\x48\x36\x51\xd2\xe2\x27\x9b\x42\x99\xc3\x91\x59\xd6\xec\xe4\x38\x05\x95\x7f\x84\x23\x77\x1a\xbb\xef\x97\x40\xac\xd1\x34\xb5\x05\x32\xbe\x70\x9f\x29\xa0\xd6\xf4\xa7\x74\x02\xeb\x30\xc8\x1b\x51\x97\xa8\x61\x34\x26\xa3\x63\xff\x5f\x9c\x84\xc1\xb2\x41\xbd\x4a\x81\xeb\xca\xd0\x66\x6b\xc7\xce\xa4\x41\x6d\x63\x95\x7f\xf4\x67\xc5\x49\xc2\x26\xaa\x6e\xe6\xd2\xb8\xc5\xee\x3b\x61\x8c\x25\xec\x07\x5e\x37\xe8\x37\x4e\x05\xd6\x65\xb7\xfe\x8e\x82\xd3\x29\x1a\x6d\xa3\x25\x94\x39\x7b\xf5\x09\x8b\xb6\xc0\xb8\x48\xa1\x77\x3c\x79\x84\x9b\x96\xd0\x09\xd6\xf8\x90\xd0\xf1\xea\xac\x7c\x92\x92\x28\x49\xf3\x04\xe2\xdd\xea\x09\xde\x68\x0c\x2f\x86\xf9\xad\x37\x9f\xcf\xc7\xe7\xb7\xcb\xe7\xc7\x6b\xd4\x18\xfb\x7e\x62\xaf\xde\xc5\x91\x28\x23\x4a\x29\xe9\x81\xb8\xf2\xc2\x8c\x0f\x40\xd1\x41\x43\xad\xb7\x58\xbe\x5f\x94\x03\x8d\x73\x20\x96\x14\x6e\x70\x05\xbe\x19\x53\xf8\x89\x34\xf3\x37\x64\xc6\x0b\x5c\x6f\xfe\x05\x6a\x3e\xfd\x5d\x6a\x53\xb4\xf1\x0d\xae\xda\x84\xfe\x29\x8a\x5b\x82\xaf\xd1\x3e\xbf\xab\x9e\xb8\x84\xf7\x2f\x1c\x99\xfe\xad\xec\xa6\x48\x2f\xd2\xc0\xe5\x3b\xd5\x6a\xde\xf1\xf2\x54\xfb\x7c\x0f\x03\xba\xa5\xe9\x56\x2e\xd4\xed\xe3\x44\xd9\xb4\xe0\xf2\xc1\x55\xef\x71\x76\x98\x4f\x85\x2c\x3f\xeb\x7d\xd3\xb8\xec\xd0\x0e\xf9\x5e\xe0\xd2\xf3\x37\xf0\xfe\xc3\xe1\x12\x18\x18\x3f\x6e\x4f\x2a\x0c\xc1\x9e\x2e\xeb\xc1\xf4\x35\x2e\x53\x68\x37\xa9\x60\x75\x6b\xfc\x91\xa3\x3b\x74\x4f\x75\xa2\x98\x39\xeb\xaf\xc6\x20\x45\x4d\x09\x76\xcc\x82\x4d\x18\x94\x38\x43\x0d\x14\x93\x4d\x6a\x65\x90\x54\x99\xa9\x76\xe5\x9c\x42\xba\x9a\x0e\xb8\x94\xad\x98\xce\xf1\x11\xad\x06\x52\xd9\xe6\x42\xc9\x74\xe8\xf8\x62\x81\xb2\x74\xd8\xdd\x04\x4a\x5c\xaa\xf7\x6e\xd4\x77\xbc\xc2\xff\xb2\xdc\x54\xdf\x1b\x61\xec\xff\x92\xef\x95\xfc\x52\x59\x5e\x7f\xb9\xee\x96\xc2\xf8\x89\xb5\x2b\xb1\xdf\x18\xc3\xd7\xcf\x57\x72\xa2\x1a\x69\x9f\xf3\xe2\xbd\x70\x87\x3f\x1c\x28\xfb\x4e\xde\x53\x6e\x4a\xaf\xff\xe5\x6a\x81\xed\x60\x4e\x20\xee\x26\xf4\xfb\x0f\x3b\xd3\xf9\xcb\x26\xb2\x71\xe3\x43\xb9\x9d\x17\xed\x30\x98\xb6\x6b\xe4\x68\x6e\x85\x2d\xae\xb7\xc9\xac\xc3\xa0\xe0\x06\xfb\xfd\x3f\x0a\x83\xbb\x28\xfb\xe7\xd2\x5d\x00\xaa\xfc\xd9\xce\x5b\xcd\x9e\x8e\x10\x39\x9b\xf8\x28\x89\x5c\xc3\x86\x7d\xd3\xee\x73\xdf\xa4\x0c\xc3\x20\xcb\x40\xcc\xa8\x49\xd9\x59\x49\x57\x25\x8a\x88\x44\x96\x05\x00\x43\x01\x87\x47\xab\x77\x4f\x12\x17\x6e\xe3\xa3\x16\x94\x1e\xfc\xf9\xfb\x2f\x7f\xfc\xfa\x9b\x7b\x16\x3a\xd0\xe3\xf1\x4e\x95\xbd\x37\xe2\xee\x98\xed\x98\xde\x0c\xb8\x12\xdd\x7d\x5e\x61\x70\x65\xe8\xe7\xcf\x88\x2a\xda\x6a\x4d\x79\x4e\x69\xb9\x13\x3b\x2a\xd1\x14\x11\x81\xf6\xe6\x63\x68\x4b\x3b\x41\x53\x50\x2f\xb3\xb7\xba\x44\x7d\xbc\xea\xf4\x89\xf8\xb0\xfd\xb7\x0f\xcc\x4b\x9c\xf1\xa6\xb6\x07\xd9\x52\xbe\xca\xff\x47\x7d\xe7\x7a\xd9\xff\x82\x62\xd3\x45\x2d\x6c\xdf\x3c\x85\x28\x8d\xda\x77\xf3\x2a\x85\xd6\x8d\x5c\x34\x97\x15\x42\x3f\xce\xda\xbf\x82\xc5\x35\x16\x37\x67\x72\x6a\xf5\x6e\xdf\x6d\xbd\xfd\xab\x3b\xd8\x41\xed\xa9\xb1\xab\x21\xf1\x2f\x67\xbf\xdb\xd8\xdb\xd9\xcc\xa0\x8d\x5d\x8a\xe7\xcd\x1c\x5e\xc2\x37\x09\x1c\x79\xd4\xe2\x67\xec\x5d\x44\xf6\x46\xcc\xdb\x5a\xda\x9d\xc7\x04\xdc\x84\x7f\x05\x00\x00\xff\xff\x2b\xd0\x2d\x9b\xd0\x0e\x00\x00")

func templateCurd_1TmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCurd_1Tmpl,
		"template/curd_1.tmpl",
	)
}

func templateCurd_1Tmpl() (*asset, error) {
	bytes, err := templateCurd_1TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/curd_1.tmpl", size: 3792, mode: os.FileMode(420), modTime: time.Unix(1616842711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateCurd_commonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xcd\x6a\xc3\x30\x10\x84\xcf\xd6\x53\x0c\x3e\xd9\x25\x24\xf7\x82\x2f\x6d\x29\x14\x52\x68\xc9\x31\x84\xa0\xca\x6b\x77\xb1\xba\x8a\xa5\xf5\xa1\x04\xbf\x7b\xf1\x4f\x03\x85\x0a\x1d\x56\xf3\x69\x87\xef\x62\x5d\x67\x5b\x02\x8b\x52\x14\xeb\x8d\xe1\xaf\x4b\x88\x8a\xc2\x00\x40\x4e\xa2\x6d\xd8\x72\xd8\x91\xe8\xae\x66\xeb\xc9\x69\x3e\x23\x12\x4d\xbd\xff\xff\xc7\x2e\xf5\x3e\x37\xa5\x31\x2e\x48\x9a\xba\xb2\x43\xef\xdf\x6c\x4b\x7b\x4e\x0a\x54\xc8\x2f\xb6\xa5\xb3\xe7\xa4\xf9\x8d\x3d\x86\x41\xf4\xc6\xdc\xf4\x5a\xe0\x33\x4b\x8d\xf9\x54\xc8\x1b\x96\x7a\xae\x6e\x06\x71\x48\xbd\x7f\x18\xd8\xd7\x14\x8b\x12\x77\x8b\xd2\xf6\x69\x91\x58\x01\xae\x26\x8b\xa4\x43\x14\xfc\xe5\xc5\x2a\xbb\x7d\xfd\x3e\xbc\xef\x4b\x33\xae\x9d\xee\x93\x5c\xf7\x22\x07\x8d\x45\xcd\x09\xc7\x53\xd2\xc8\xd2\x6e\xd0\x61\x99\x4a\x7c\x84\xe0\xa7\xde\x26\x44\xf0\x06\x67\xdc\x57\x88\x56\x5a\xc2\xb4\x71\x35\x59\xc6\xcd\x34\x1e\xf9\x84\xaa\x42\x37\x47\xbf\x16\x1a\x07\x32\x59\x36\x9a\xe9\xae\x59\x63\x7d\x22\x33\xfe\x04\x00\x00\xff\xff\xda\xfd\x5c\xfb\x8e\x01\x00\x00")

func templateCurd_commonTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCurd_commonTmpl,
		"template/curd_common.tmpl",
	)
}

func templateCurd_commonTmpl() (*asset, error) {
	bytes, err := templateCurd_commonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/curd_common.tmpl", size: 398, mode: os.FileMode(420), modTime: time.Unix(1616719136, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMarkdownTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xc1\x6a\xea\x40\x14\x86\xf7\x81\xbc\xc3\x81\xb8\x50\xb8\xc9\x03\x08\xf7\x6e\xae\x1b\xb9\x17\xeb\x42\xba\x11\x17\xb1\x9e\x16\x69\x92\x96\x68\xa0\x61\x66\xc0\x45\xa1\x85\xd2\xd6\x45\xc1\xac\x0a\x05\x11\xbb\xa8\x52\xda\x82\x98\x3e\x8e\x19\xf5\x2d\x4a\x66\x9c\xd4\x56\x9a\xc5\x84\xf9\xff\xc3\xf9\x4f\xbe\x13\xc3\x80\xd5\xc3\x98\xf7\x62\x3e\x3a\xd7\x35\x5d\xa3\xc9\xfc\x36\xb9\x1c\xd0\x54\x4d\xfa\xd7\x40\x61\x35\x7d\xe5\xd1\x0d\x50\x48\x86\x17\xfc\x65\x0c\x54\xd7\x68\xd1\x34\x4d\x71\xa8\x13\xe4\x4b\xd7\x08\xf1\x6d\xef\x08\xc1\xaa\xd9\x4d\x07\xff\xb7\x3b\x5d\xc6\x28\x10\x62\x95\xbd\x16\x9e\x31\x46\xeb\xe9\x45\x98\x15\xdb\x45\xc6\x1a\x79\xe3\xd3\xfd\x6a\x15\x40\x3e\x94\x10\xeb\xef\x89\xeb\xa2\x27\x9a\x89\x14\xf4\x5a\x8c\xa5\x03\xab\xc0\xdc\x31\x86\xbf\x20\xd7\xee\xa2\x0b\xc5\xdf\x60\x95\xb0\x73\x20\xe3\x75\xcd\x30\x0c\x20\x44\x78\x2a\xc9\x52\xf7\xad\x3c\x5d\xfb\x93\x95\x65\x79\x69\x86\x29\x68\x3c\x0d\xf8\xe4\x4d\xd2\x90\xa4\x84\x00\x14\x96\xcf\x71\x72\x7f\x05\x14\x78\x34\x4d\xfa\xa3\xc5\x6c\xbe\x7c\x9c\x53\x58\xc7\xd1\x6a\x32\x4c\x7a\xef\x99\xc3\xa3\xe9\x62\x16\xaf\xef\x26\xbb\x58\x15\x55\x73\x97\xed\x37\x61\x0b\xb2\x1c\x75\x03\x59\x40\x72\x02\xd7\x93\x1f\x03\x20\xb0\x4b\xa9\x16\x9e\x62\x25\x70\x9b\xe8\x33\x26\xf5\x72\xa7\x12\x38\xce\x66\x37\x25\x3c\xb4\x03\xa7\xbb\x6f\x3b\x01\xaa\x82\xaa\xdf\x76\x6d\x3f\xfc\x87\xa1\x52\x64\xab\x1f\x16\x51\xaf\xed\x55\x1b\x79\x23\xfb\x97\x0a\x99\xf7\x11\x00\x00\xff\xff\x54\x04\xaf\xad\x62\x02\x00\x00")

func templateMarkdownTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMarkdownTmpl,
		"template/markdown.tmpl",
	)
}

func templateMarkdownTmpl() (*asset, error) {
	bytes, err := templateMarkdownTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/markdown.tmpl", size: 610, mode: os.FileMode(420), modTime: time.Unix(1599730646, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x4f\x8b\xa3\x40\x10\xc5\xcf\x5b\x9f\xa2\x10\x59\x74\x09\x7a\x5f\xd8\x53\x42\x72\xdb\xb9\x78\x1b\xe6\xd0\x9a\x8a\xd3\x13\xab\x5b\xda\x16\x46\x9a\xfa\xee\x43\x6b\x42\xfe\x10\x26\x73\x92\x2a\x7f\xef\xf9\xea\xd9\xab\xe6\xa8\x5a\x42\xb6\x7b\xea\x00\x34\xf7\xd6\x79\xcc\xe0\xd7\xa7\xd7\x4c\x98\xb4\xda\xbf\x8f\x75\xd1\x58\x2e\x6b\x32\x03\xb1\x2a\x3b\x5d\x3b\xe5\xa6\x32\x02\x09\xe4\x00\x21\x38\x65\x5a\xc2\xf4\x48\xd3\x0a\xd3\x0a\xff\xfe\xc3\x42\x04\xc0\x4f\x3d\x61\x08\x69\x55\x54\xaa\xee\xe8\xbf\x62\xda\x59\x11\x1c\xbc\x1b\x1b\x8f\xe1\xa2\xfc\x58\x61\xaa\x3d\xf1\x2c\x9d\xe1\x0d\x0d\x8d\x08\x46\x79\x7c\x71\x59\x16\x3b\xbb\xb6\xdd\xc8\x26\xda\x45\xe2\x31\xd3\x29\xd3\x56\x53\xbf\x10\x67\x60\x6b\x1d\x2b\xbf\xd5\xd4\xed\x87\xc5\x5c\x1f\xf0\x5e\xbb\xb8\xaf\x2d\x33\x19\x1f\xa9\xb2\x7c\xf0\x85\x3b\x2a\x04\x32\x7b\x11\x38\x3d\x05\x00\x0e\xa3\x69\x30\x63\xfc\x13\xc2\xed\xfd\x39\xce\x63\x96\xc7\x22\xb4\x69\x31\x80\x23\x3f\x3a\x83\xc9\x35\x2a\x92\x80\x7c\x6b\xb3\x64\x18\xb2\x1c\x5f\xdf\xee\xad\xce\x9b\x80\xcf\x4b\x4e\xce\xe7\x6d\xea\x17\xa7\xe7\x7a\x44\x92\xd5\xe9\x16\x94\x27\x31\x96\x3e\xe7\x14\xda\x78\x72\x07\xd5\x50\x90\xeb\x28\x57\xeb\x9f\xe4\xf9\xcd\xc5\xb3\xdf\x7e\x1b\xee\x34\x7c\x05\x00\x00\xff\xff\x75\x88\x06\x4a\xcd\x02\x00\x00")

func templateModelTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelTmpl,
		"template/model.tmpl",
	)
}

func templateModelTmpl() (*asset, error) {
	bytes, err := templateModelTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.tmpl", size: 717, mode: os.FileMode(420), modTime: time.Unix(1613654646, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModel_replyTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xb1\xaa\xc2\x40\x10\x46\xe1\xfa\xce\x53\xfc\x84\x54\x17\xc9\x03\x04\xec\x44\x3b\x11\x49\x27\x42\xc6\xec\x10\x62\x92\xd9\x90\x8c\xc5\xb2\xcc\xbb\x8b\xb6\xf6\x87\xc3\xb7\x70\x37\x72\x2f\x98\x63\x90\x89\x88\x72\x5e\x59\x7b\x41\x39\x4a\xda\xa1\x6c\x50\xef\x51\xb9\x13\x59\x5a\x04\xc7\x41\x43\xce\x65\x53\x35\xfc\x98\xe4\xcc\xb3\x9c\xa2\xfb\x55\x96\x29\x61\xb3\xf5\xd5\x19\x32\xfd\x1d\xd8\x18\xb7\xfb\xff\x6f\x89\xf6\xb9\x45\xad\x8b\xc0\xc6\x45\x4b\x00\x70\xe1\x7e\x50\xb6\x21\xea\x77\x43\xfe\x31\x88\x06\xf7\x77\x00\x00\x00\xff\xff\xe5\x78\xce\x90\x9b\x00\x00\x00")

func templateModel_replyTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateModel_replyTmpl,
		"template/model_reply.tmpl",
	)
}

func templateModel_replyTmpl() (*asset, error) {
	bytes, err := templateModel_replyTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model_reply.tmpl", size: 155, mode: os.FileMode(420), modTime: time.Unix(1613992842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModel_reqTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xb1\x8e\xc2\x30\x10\x04\xd0\x3a\xfb\x15\xab\x28\xe5\x29\x1f\x10\xe9\x9a\x2b\x8e\x0e\x10\xa4\x27\x4e\xbc\xb2\x4c\x92\xdd\xe0\x98\xc2\xb2\xf6\xdf\x91\xe9\x10\xed\xcc\x1b\x69\x36\x33\xcd\xc6\x11\xae\x62\x69\x01\x80\x9c\x83\x61\x47\xd8\xcc\x94\x7e\xb0\xe9\xb1\xfb\xc5\x56\x15\x20\xa6\x8d\xf0\xdf\xb3\xcd\xb9\xe9\xdb\xde\x8c\x0b\x1d\xcd\x4a\x07\x51\xbd\xd0\x03\xf7\x18\x9e\x53\xc4\x0c\x88\x88\xdf\x04\xaa\x53\xb0\x14\xfe\x52\x81\x9e\x1d\x0e\xf7\x5d\xb8\xab\xa5\xa4\xb7\x31\xd5\x03\x54\x57\x09\xb1\xac\x3f\xc5\x2e\x21\x96\xf6\x6c\x9c\x67\x13\xbd\x30\xe8\xfb\x27\xb1\x55\x7d\x05\x00\x00\xff\xff\x71\xad\x77\x42\xbf\x00\x00\x00")

func templateModel_reqTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateModel_reqTmpl,
		"template/model_req.tmpl",
	)
}

func templateModel_reqTmpl() (*asset, error) {
	bytes, err := templateModel_reqTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model_req.tmpl", size: 191, mode: os.FileMode(420), modTime: time.Unix(1613992842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateOp_codeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\xb1\xaa\xc2\x40\x10\x85\xe1\xfa\xce\x53\x0c\x21\xc5\x15\x24\x0f\x20\xa4\x10\x05\x3b\xd3\xc4\x5a\xc6\xcc\x21\x48\x36\xbb\x4b\xb2\x16\x61\x99\x77\x17\x04\xc1\x22\x5a\x9f\xf3\xfd\x51\xba\x41\x7a\xf0\x18\x14\x8e\x28\x2d\x11\xdc\xc4\x43\x50\xf0\x9c\xa6\xbb\xef\x89\xba\xe0\xe7\xf4\x4f\x39\x4f\xe2\x7b\x70\x39\x60\xd9\x72\xd9\xf2\xae\xe6\xca\x8c\xe8\xaf\x89\x39\x57\xad\xdc\x1c\xce\x32\xe2\x14\xcc\xf6\xaa\xcc\xfc\x0e\xd5\x5c\x7c\x1e\xcc\xae\xa2\x5a\xac\xb9\x23\xdc\x4f\xa7\x70\xab\xee\x12\x55\x12\xbe\xbb\xc7\x6b\x2f\x88\x72\x86\x57\x33\xda\x3c\x03\x00\x00\xff\xff\x81\xfb\xfd\x66\xf8\x00\x00\x00")

func templateOp_codeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateOp_codeTmpl,
		"template/op_code.tmpl",
	)
}

func templateOp_codeTmpl() (*asset, error) {
	bytes, err := templateOp_codeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/op_code.tmpl", size: 248, mode: os.FileMode(420), modTime: time.Unix(1616846254, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatePageTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4b\x6f\xdb\x3c\x10\x3c\x8b\xbf\x62\xc1\x93\x94\x38\x7e\x7c\xc7\x20\xba\x7d\xc7\x22\x0d\x92\xa2\xd7\x9a\x90\x29\x87\x2d\x45\x12\xe4\x0a\xa9\x9b\xf8\xbf\x17\x7c\xe8\x61\x59\x49\x7c\xe8\x49\xe0\xee\x6a\x66\x67\x76\x49\xc3\xaa\x5f\x6c\xcf\xa1\xd1\x3b\x2e\x09\x11\x8d\xd1\x16\x81\x72\x6b\xb5\x75\x94\x90\x4a\x2b\x87\x90\x93\x6c\xb5\x82\xff\x79\xcd\x5a\x89\x4f\xe2\x0f\x87\x25\xc9\xd2\xf1\xbe\x6d\x00\x4a\xd8\xf4\x81\x90\x2f\xe1\xbf\x35\x29\x08\x59\xad\xe0\x49\x34\x46\xf2\x07\xcf\x52\x31\x59\xb5\x92\x21\x07\x5a\x5b\xdd\xd0\x05\x50\xd4\x14\x5e\x04\x3e\xeb\x16\x01\x35\x32\xf9\xa3\xd2\xad\x42\xe7\xff\x8c\x45\x20\xd4\x8e\xff\x06\x87\xcc\x22\xf8\x08\x6c\x48\xdd\xaa\x0a\x72\x03\x57\x0f\x6c\x2f\x14\x43\xa1\x55\x31\x22\xca\x0b\xc8\x43\xa5\x50\xb8\x00\xd4\xfe\x5b\xc0\x2b\xc9\x44\x0d\x66\xe9\x3b\x2e\x4b\x58\xc3\xdb\x1b\x98\x65\x6c\xd7\x1f\x5f\x49\x96\x85\xec\xa2\x0f\xc3\x66\x31\x96\x4d\xb2\x23\xc9\x02\x70\x09\x79\x28\xbd\xd9\x14\x57\xa9\xf8\xda\x7b\x80\x1a\xca\xd8\xe4\x75\x07\x72\xe3\xe3\x96\x63\x6b\x15\x39\x06\x47\x3e\xf3\xe2\xcc\x88\x4b\x1d\x08\xda\xc3\xcf\x51\xf1\x25\x26\xf4\xaa\xe3\x10\x8f\x29\x3f\xb5\x25\xf9\x31\x31\x23\x14\x47\xc2\xce\xd1\x78\xba\x4b\x10\x57\xbd\x4d\x01\x27\xd9\x90\x58\x52\x69\xd9\xd1\x0d\x15\xde\xf7\x90\xfd\xdc\x71\x51\x43\x92\x7c\xd3\x19\xbf\x29\x7a\xfe\x31\xa6\xcf\x8e\x61\x4f\xc2\xe7\x33\x8b\xb3\xfa\xce\xf6\x2d\xff\x5a\xd7\x8e\xe3\x17\xd1\x08\x1c\xcf\x4d\x87\xb0\x9f\x9c\xf4\xa9\x77\x16\x79\x76\x52\x53\x58\xbf\xb1\x11\x2e\x8e\x2b\x00\xf6\x13\xeb\x3a\x87\xdb\xe8\xd5\xb0\xe7\xc9\xc7\xde\xfd\x68\x55\x37\xb6\xa4\x70\xbd\x80\xf5\x54\xb1\x97\x18\x20\x07\xd7\x92\xe2\x8f\xc5\x02\x53\x3b\xa0\x61\x15\xe7\x96\x75\x56\xec\x58\xe7\x78\x3b\x2f\x15\x3c\xac\xf5\x3f\xd7\x3b\x3f\x1c\x6e\x45\x7d\xc8\x0b\x08\xcf\xe0\xc9\x95\xb9\x3b\x65\x8a\xef\xe4\xf2\x9e\xbf\xe4\x54\xb5\x4d\x3c\xd3\x82\x64\x47\xe0\xd2\x71\x78\xff\xaa\x0d\xaf\xe7\xe4\xce\x7d\xc0\xe0\x7c\x7e\x96\xe2\xb2\xdb\xda\x61\x2a\x21\x87\x97\x28\xa9\x06\xc3\x6d\xad\x6d\x03\xc6\x3f\x4e\x4c\xee\xb5\x15\xf8\xdc\x10\x3c\x18\x3e\x2e\x73\x68\xdb\x0a\x3d\x4d\x78\xf8\x85\x42\xd8\xfe\x74\x5a\xdd\x7a\xfd\x74\x4b\xb2\x40\x3d\x0a\xfb\xa6\xe9\xf6\x8c\xef\x91\x1b\x79\x18\x03\x3f\x72\x67\xb4\x72\x7c\x39\xa5\x8c\x95\x03\x6f\x20\x98\x61\x88\x0d\xcd\x74\xf4\xad\x5b\xb9\x2e\x1e\x56\x29\xf4\xf4\x37\x00\x00\xff\xff\xa4\xc5\xc0\x7f\xff\x06\x00\x00")

func templatePageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatePageTmpl,
		"template/page.tmpl",
	)
}

func templatePageTmpl() (*asset, error) {
	bytes, err := templatePageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/page.tmpl", size: 1791, mode: os.FileMode(420), modTime: time.Unix(1613993637, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcd\x6e\x1b\x37\x10\x3e\x2f\x9f\x62\xba\x48\x01\xae\xb3\x59\xa5\x3d\x3a\xd5\xc1\x95\x90\x40\x80\x6b\xb7\xb1\x82\x1e\x0c\x43\xa0\x96\xa3\x35\x2b\x2e\xb9\xe1\x72\x23\xab\x82\x1e\xa1\xf7\x1e\xfa\x00\xbd\xf4\xde\x07\x6a\xde\xa3\x20\x29\xc9\xfa\x8d\x55\xb7\x35\x72\xe3\x72\xe7\x9b\x9f\x8f\xdf\x0c\x59\xb1\x7c\xcc\x0a\x84\x1a\xcd\x07\x91\x23\x21\xa2\xac\xb4\xb1\x40\x49\x14\xa3\x31\xda\xd4\x31\x89\xe2\x42\xd8\xdb\x66\x98\xe5\xba\x6c\x0d\x51\xd5\x58\xb2\xd6\x10\xed\x50\xd8\x56\xa9\x39\xca\x03\x26\x52\x0c\x0d\x33\xd3\x96\xd4\x45\x4c\xa2\x3b\x2b\x4a\x84\x4f\xd9\x39\x83\x2d\x57\x23\x66\xc5\x6d\xab\xb6\xa6\xc9\xed\x76\x26\x85\x50\x2f\x0a\xad\x44\xee\x56\xee\x5f\xc0\x27\x84\xcc\x66\x86\xa9\x02\xe1\xd9\x18\xa7\x29\x3c\xeb\xc3\x69\x1b\xb2\xf9\x9c\x10\x42\x46\x8d\xca\x81\xd6\x70\x72\x15\x0a\x4e\x60\x36\xcb\xfa\x6c\x28\xf1\x82\x95\xf8\x46\xcf\xe7\xdf\xb3\x02\x6b\x9a\xc3\x49\x21\x54\xd6\xd1\xca\xe2\x9d\x4d\xc1\xe0\x7b\x38\xf1\xc5\x66\xaf\x85\xe2\xdb\xa0\xb7\xf8\x3e\x01\x6a\xb0\x92\xd3\x4f\x9b\x55\x72\x9a\x02\x1a\x03\x9e\xdc\x04\x66\x24\x0a\xa8\x36\x28\x9c\xd0\x07\xa0\xc9\xc2\x3a\xeb\x32\xcb\xa0\x0d\x25\x1b\x23\xbd\xbe\x59\x44\xdc\x86\xa4\xf0\x32\x21\xd1\x07\x66\x20\xd7\x8d\xb2\x20\x94\x0d\x9f\x9c\x59\xd6\x2f\x2b\x38\x88\x24\x91\x18\x05\x50\x48\xb6\x0d\x75\xc6\x99\xce\x1c\x37\xfb\x92\xeb\x6b\xcb\x24\xcd\x3d\x4d\xc9\x2b\x0f\xf9\xa2\x0d\x4a\x48\x57\x5f\x64\xd0\x36\x46\x91\x68\x4e\xee\xfd\xc2\x37\x6d\x78\xb9\xef\xef\x22\xb7\xcd\xb8\xfb\x62\x1e\x15\x6e\x83\xad\x85\xeb\xe5\xae\x4f\x1a\xda\x21\x9f\xe5\xe6\x45\x53\x42\xdb\xf9\x75\xab\xe5\xe6\x95\xf8\x19\x17\xbb\x6e\x49\x96\x21\xe6\xc7\xe8\xe9\x8c\xf3\x1d\x35\x95\x70\x80\xf8\x24\xe8\x22\xc8\xa2\x0e\x24\x9c\x2e\x59\xe8\x18\x64\x16\xf7\xf1\x50\x26\x9e\xbb\xbd\x44\xb8\x5d\x47\x46\x24\x78\x0a\x03\xe7\xcd\x60\x9d\x9d\xb3\xda\xf6\x54\x8d\xc6\xf6\x38\x4d\x48\x54\x66\x3d\x0e\x6d\x27\x11\x2a\x78\x42\x22\xa9\x8b\xcb\x2a\x84\xbe\xc0\xc9\x19\x2f\x85\x3a\x77\x5b\x68\x98\x45\x9a\x2f\x2d\x42\x49\xca\x3a\x2d\xfa\x82\xce\x75\xf1\x5a\xa0\xe4\x9d\x5b\xd7\x81\xb4\x4c\x5d\x36\x29\x8c\x98\xac\x71\x05\x7a\x8b\xb9\x36\xfc\xcc\xa1\xfc\x54\xc8\xfa\xa2\x44\xea\x57\x17\x7a\x42\x93\xec\x9d\x12\x77\x34\x59\xd9\x87\xb0\x42\xab\x8e\xe6\xee\x20\x6a\x6b\x84\x2a\x16\xcd\x72\x59\xed\x61\x7c\x17\xda\x15\x75\x25\xd9\xd4\xd9\xac\x92\xdd\x0b\xcd\xae\x82\xf7\xb5\x6c\xeb\x46\x6e\x54\x78\x59\x85\xbd\xcb\x31\x89\x06\x9b\x4a\x0d\x67\xb4\x4e\x55\x0a\xde\x4d\x42\xd6\xcf\xe3\x28\xe5\x74\x51\xee\x28\x47\x70\x77\x46\x6b\x32\xd1\x92\x6f\xc9\xe4\x0d\xda\x6d\x4f\xdf\x4e\x7b\xdc\x65\xe2\x8f\x76\x57\x28\x52\x17\xd9\x8f\xcc\xa8\x11\x8d\x27\xcc\xa8\x7d\x89\x9c\xc2\x97\x75\xec\x03\x25\x1b\xca\xd2\xc6\x0b\x84\xc6\xbd\xee\x5f\x7f\xfe\xf2\xf1\x8f\x5f\x3f\xfe\xf6\xfb\xf5\x8b\xaf\x6e\xe2\xc4\x6b\x6e\x9d\x9a\x2e\x4a\xdc\x95\xef\x03\xa9\x6d\x69\xd8\x96\x5e\x94\xf7\xa3\x72\xa7\x81\xfe\x33\xe9\x5a\x37\x84\x3c\xbb\xd6\x34\x4f\xa6\xdd\x2e\xca\xc7\x6a\xb7\x8b\xf2\xf3\xd1\xee\x0f\x0d\x9a\xe9\x41\xf5\xd2\x83\x37\xd6\xfa\xb5\xe8\x23\x1e\xa5\xe9\xa3\x52\x7a\x57\x71\x5f\xd4\x23\x66\xb1\xe0\x4e\x4f\x6e\x46\x3e\x4d\xc3\x85\x54\xff\x59\xcf\x7d\xbd\xec\x39\xe5\x33\x0b\x4f\x26\x6f\xe7\x6e\x07\x95\xf5\x59\xb1\x10\x50\xfc\x53\xad\xdd\x83\x69\xa0\x70\xe2\xbb\x29\xfb\x8e\x55\x34\x21\x24\xd2\xdb\x50\x2d\x5d\x01\x7a\x1f\x58\x4b\x4f\x8a\x5e\x81\x47\xda\xc0\x20\x85\x31\x4e\xfd\x25\xe3\x5f\x60\x65\xd6\xd1\xb2\x29\x55\x4d\xfd\x99\x3a\x2a\x5c\xd4\xeb\x31\x4e\x6f\x1c\x21\xce\x4b\xf8\x70\x7f\xa3\xc1\x4a\x8b\x81\x81\xc3\xb4\xfa\x38\xe9\xbd\x33\xc7\xd0\x3c\xdc\xf9\xff\xb6\xff\xfb\x58\x56\x34\x16\x3c\x0e\x71\xd6\xee\x2f\x78\x0e\xf1\xab\x18\x9e\x1f\xbc\xeb\x9e\x7c\x5c\x04\x9a\x1e\x3b\x31\x02\xfa\x7f\x1b\x1a\xdb\x53\xc3\x3d\xcc\x51\xf1\xf9\xfc\xef\x00\x00\x00\xff\xff\xd1\x80\xb0\xb6\x75\x0c\x00\x00")

func templateServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceTmpl,
		"template/service.tmpl",
	)
}

func templateServiceTmpl() (*asset, error) {
	bytes, err := templateServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service.tmpl", size: 3189, mode: os.FileMode(420), modTime: time.Unix(1616894576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/admin_cmd.tmpl":         templateAdmin_cmdTmpl,
	"template/admin_command_biz.tmpl": templateAdmin_command_bizTmpl,
	"template/bb_admin_api_biz.tmpl":  templateBb_admin_api_bizTmpl,
	"template/bb_admin_biz.tmpl":      templateBb_admin_bizTmpl,
	"template/biz.tmpl":               templateBizTmpl,
	"template/curd.tmpl":              templateCurdTmpl,
	"template/curd_1.tmpl":            templateCurd_1Tmpl,
	"template/curd_common.tmpl":       templateCurd_commonTmpl,
	"template/markdown.tmpl":          templateMarkdownTmpl,
	"template/model.tmpl":             templateModelTmpl,
	"template/model_reply.tmpl":       templateModel_replyTmpl,
	"template/model_req.tmpl":         templateModel_reqTmpl,
	"template/op_code.tmpl":           templateOp_codeTmpl,
	"template/page.tmpl":              templatePageTmpl,
	"template/service.tmpl":           templateServiceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"admin_cmd.tmpl":         &bintree{templateAdmin_cmdTmpl, map[string]*bintree{}},
		"admin_command_biz.tmpl": &bintree{templateAdmin_command_bizTmpl, map[string]*bintree{}},
		"bb_admin_api_biz.tmpl":  &bintree{templateBb_admin_api_bizTmpl, map[string]*bintree{}},
		"bb_admin_biz.tmpl":      &bintree{templateBb_admin_bizTmpl, map[string]*bintree{}},
		"biz.tmpl":               &bintree{templateBizTmpl, map[string]*bintree{}},
		"curd.tmpl":              &bintree{templateCurdTmpl, map[string]*bintree{}},
		"curd_1.tmpl":            &bintree{templateCurd_1Tmpl, map[string]*bintree{}},
		"curd_common.tmpl":       &bintree{templateCurd_commonTmpl, map[string]*bintree{}},
		"markdown.tmpl":          &bintree{templateMarkdownTmpl, map[string]*bintree{}},
		"model.tmpl":             &bintree{templateModelTmpl, map[string]*bintree{}},
		"model_reply.tmpl":       &bintree{templateModel_replyTmpl, map[string]*bintree{}},
		"model_req.tmpl":         &bintree{templateModel_reqTmpl, map[string]*bintree{}},
		"op_code.tmpl":           &bintree{templateOp_codeTmpl, map[string]*bintree{}},
		"page.tmpl":              &bintree{templatePageTmpl, map[string]*bintree{}},
		"service.tmpl":           &bintree{templateServiceTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
